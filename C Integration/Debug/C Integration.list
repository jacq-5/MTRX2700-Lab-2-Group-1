
C Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000678  08000678  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000678  08000678  00002030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000678  08000678  00002030  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000678  08000678  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000678  08000678  00001678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800067c  0800067c  0000167c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08000680  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002030  2**0
                  CONTENTS
 10 .bss          00000058  20000030  20000030  00002030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  00002030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001971  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000687  00000000  00000000  000039d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00004058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f1  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000902  00000000  00000000  000042a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001895  00000000  00000000  00004ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076760  00000000  00000000  00006438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0007cb98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000464  00000000  00000000  0007cbdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0007d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000030 	.word	0x20000030
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000660 	.word	0x08000660

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000034 	.word	0x20000034
 80001d0:	08000660 	.word	0x08000660

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <finished_transmission>:
void (*when_receiving_data_db)(uint8_t [][32], uint32_t, SerialPort *) = 0x00;
void (*when_receiving_data)(uint8_t [], uint8_t, uint32_t buffer_size, SerialPort *) = 0x00;
void (*when_sending_data)() = 0x00;

// This function will be called after a transmission is complete [callback function]
void finished_transmission(uint8_t *rx_string, uint32_t bytes_sent) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
	rx_string[bytes_sent] = '\0'; 		//end of string becomes terminating character so it transmits correctly
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	4413      	add	r3, r2
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
	SerialOutputString(rx_string, &USART1_PORT);
 8000278:	4903      	ldr	r1, [pc, #12]	@ (8000288 <finished_transmission+0x24>)
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f000 f903 	bl	8000486 <SerialOutputString>
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000008 	.word	0x20000008

0800028c <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void)
{
 800028c:	b598      	push	{r3, r4, r7, lr}
 800028e:	af00      	add	r7, sp, #0
	// run the USART receive handler (make sure it is not null first !)
	if (when_receiving_data != 0x00) {
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <USART1_EXTI25_IRQHandler+0x50>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d008      	beq.n	80002aa <USART1_EXTI25_IRQHandler+0x1e>
		when_receiving_data(buffer, terminating, buffer_size, &USART1_PORT);
 8000298:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <USART1_EXTI25_IRQHandler+0x50>)
 800029a:	681c      	ldr	r4, [r3, #0]
 800029c:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <USART1_EXTI25_IRQHandler+0x54>)
 800029e:	7819      	ldrb	r1, [r3, #0]
 80002a0:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <USART1_EXTI25_IRQHandler+0x58>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b10      	ldr	r3, [pc, #64]	@ (80002e8 <USART1_EXTI25_IRQHandler+0x5c>)
 80002a6:	4811      	ldr	r0, [pc, #68]	@ (80002ec <USART1_EXTI25_IRQHandler+0x60>)
 80002a8:	47a0      	blx	r4
	}

	// run the USART receive handler for double buffer (make sure it is not null first !)
	if (when_receiving_data_db != 0x00) {
 80002aa:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <USART1_EXTI25_IRQHandler+0x64>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d007      	beq.n	80002c2 <USART1_EXTI25_IRQHandler+0x36>
			when_receiving_data_db(buffer, buffer_size_db, &USART1_PORT);
 80002b2:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <USART1_EXTI25_IRQHandler+0x64>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a0f      	ldr	r2, [pc, #60]	@ (80002f4 <USART1_EXTI25_IRQHandler+0x68>)
 80002b8:	7812      	ldrb	r2, [r2, #0]
 80002ba:	4611      	mov	r1, r2
 80002bc:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <USART1_EXTI25_IRQHandler+0x5c>)
 80002be:	480b      	ldr	r0, [pc, #44]	@ (80002ec <USART1_EXTI25_IRQHandler+0x60>)
 80002c0:	4798      	blx	r3
		}

	// run the USART transmit handler (make sure it is not null first !)
	if (when_sending_data != 0x00) {
 80002c2:	4b0d      	ldr	r3, [pc, #52]	@ (80002f8 <USART1_EXTI25_IRQHandler+0x6c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d006      	beq.n	80002d8 <USART1_EXTI25_IRQHandler+0x4c>
		when_sending_data(buffer[0], &USART1_PORT); //try getting rid of these arguments, don't need them
 80002ca:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <USART1_EXTI25_IRQHandler+0x6c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a07      	ldr	r2, [pc, #28]	@ (80002ec <USART1_EXTI25_IRQHandler+0x60>)
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	4905      	ldr	r1, [pc, #20]	@ (80002e8 <USART1_EXTI25_IRQHandler+0x5c>)
 80002d4:	4610      	mov	r0, r2
 80002d6:	4798      	blx	r3
	}
}
 80002d8:	bf00      	nop
 80002da:	bd98      	pop	{r3, r4, r7, pc}
 80002dc:	20000070 	.word	0x20000070
 80002e0:	20000004 	.word	0x20000004
 80002e4:	20000000 	.word	0x20000000
 80002e8:	20000008 	.word	0x20000008
 80002ec:	2000004c 	.word	0x2000004c
 80002f0:	2000006c 	.word	0x2000006c
 80002f4:	20000005 	.word	0x20000005
 80002f8:	20000074 	.word	0x20000074

080002fc <enable_interrupt>:

//unsure if I need this whole thing
void enable_interrupt() {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000300:	b672      	cpsid	i
}
 8000302:	bf00      	nop

    // Disable interrupts while messing around with settings
    __disable_irq();

    //enable receive interrupt
    USART1->CR1 |= USART_CR1_RXNEIE;
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <enable_interrupt+0x2c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a07      	ldr	r2, [pc, #28]	@ (8000328 <enable_interrupt+0x2c>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6013      	str	r3, [r2, #0]

	// Enable USART1 interrupt in NVIC
	NVIC_SetPriority(USART1_IRQn, 1);  // Set priority for USART1 interrupt
 8000310:	2101      	movs	r1, #1
 8000312:	2025      	movs	r0, #37	@ 0x25
 8000314:	f7ff ff7c 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);       // allows USART1 interrupt to occur
 8000318:	2025      	movs	r0, #37	@ 0x25
 800031a:	f7ff ff5b 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800031e:	b662      	cpsie	i
}
 8000320:	bf00      	nop

    // Re-enable interrupts
    __enable_irq();
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40013800 	.word	0x40013800

0800032c <main>:



int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
//excersise 2 Serial Ports
	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission); //set callback function
 8000330:	4a05      	ldr	r2, [pc, #20]	@ (8000348 <main+0x1c>)
 8000332:	4906      	ldr	r1, [pc, #24]	@ (800034c <main+0x20>)
 8000334:	2004      	movs	r0, #4
 8000336:	f000 f80f 	bl	8000358 <SerialInitialise>
	//uint8_t terminating = '#';
	//SerialOutputString(send, &USART1_PORT);					//transmit string
	//SerialInputString(buffer, buffer_size, &USART1_PORT, terminating);		//receive string

	//part (c)
	when_receiving_data = &InterruptInputString;				//set the interrupt handling function
 800033a:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <main+0x24>)
 800033c:	4a05      	ldr	r2, [pc, #20]	@ (8000354 <main+0x28>)
 800033e:	601a      	str	r2, [r3, #0]
	enable_interrupt();											// enable the interrupt for the USART
 8000340:	f7ff ffdc 	bl	80002fc <enable_interrupt>
	enable_clocks();                     // Enable GPIOE and TIM2 clocks
	initialise_board();
	SerialInputString(buffer, &USART1_PORT, terminating);*/

	/* Loop forever */
		for(;;) {}
 8000344:	bf00      	nop
 8000346:	e7fd      	b.n	8000344 <main+0x18>
 8000348:	08000265 	.word	0x08000265
 800034c:	20000008 	.word	0x20000008
 8000350:	20000070 	.word	0x20000070
 8000354:	080004bd 	.word	0x080004bd

08000358 <SerialInitialise>:
uint8_t still_reading = 0;
uint8_t terminated = 0;

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint8_t *, uint32_t)) {
 8000358:	b480      	push	{r7}
 800035a:	b087      	sub	sp, #28
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;		//set callback function
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800036a:	4b39      	ldr	r3, [pc, #228]	@ (8000450 <SerialInitialise+0xf8>)
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	4a38      	ldr	r2, [pc, #224]	@ (8000450 <SerialInitialise+0xf8>)
 8000370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000374:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000376:	4b36      	ldr	r3, [pc, #216]	@ (8000450 <SerialInitialise+0xf8>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a35      	ldr	r2, [pc, #212]	@ (8000450 <SerialInitialise+0xf8>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	691a      	ldr	r2, [r3, #16]
 8000386:	4b32      	ldr	r3, [pc, #200]	@ (8000450 <SerialInitialise+0xf8>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4931      	ldr	r1, [pc, #196]	@ (8000450 <SerialInitialise+0xf8>)
 800038c:	4313      	orrs	r3, r2
 800038e:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	6952      	ldr	r2, [r2, #20]
 8000398:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	68ba      	ldr	r2, [r7, #8]
 80003a0:	6992      	ldr	r2, [r2, #24]
 80003a2:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	69d9      	ldr	r1, [r3, #28]
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	6a1a      	ldr	r2, [r3, #32]
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	430a      	orrs	r2, r1
 80003b4:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	6a19      	ldr	r1, [r3, #32]
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	68da      	ldr	r2, [r3, #12]
 80003cc:	4b20      	ldr	r3, [pc, #128]	@ (8000450 <SerialInitialise+0xf8>)
 80003ce:	69db      	ldr	r3, [r3, #28]
 80003d0:	491f      	ldr	r1, [pc, #124]	@ (8000450 <SerialInitialise+0xf8>)
 80003d2:	4313      	orrs	r3, r2
 80003d4:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	689a      	ldr	r2, [r3, #8]
 80003da:	4b1d      	ldr	r3, [pc, #116]	@ (8000450 <SerialInitialise+0xf8>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	491c      	ldr	r1, [pc, #112]	@ (8000450 <SerialInitialise+0xf8>)
 80003e0:	4313      	orrs	r3, r2
 80003e2:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	330c      	adds	r3, #12
 80003ea:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d820      	bhi.n	8000434 <SerialInitialise+0xdc>
 80003f2:	a201      	add	r2, pc, #4	@ (adr r2, 80003f8 <SerialInitialise+0xa0>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	0800040d 	.word	0x0800040d
 80003fc:	08000415 	.word	0x08000415
 8000400:	0800041d 	.word	0x0800041d
 8000404:	08000425 	.word	0x08000425
 8000408:	0800042d 	.word	0x0800042d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	2246      	movs	r2, #70	@ 0x46
 8000410:	801a      	strh	r2, [r3, #0]
		break;
 8000412:	e00f      	b.n	8000434 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	2246      	movs	r2, #70	@ 0x46
 8000418:	801a      	strh	r2, [r3, #0]
		break;
 800041a:	e00b      	b.n	8000434 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	2246      	movs	r2, #70	@ 0x46
 8000420:	801a      	strh	r2, [r3, #0]
		break;
 8000422:	e007      	b.n	8000434 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	2246      	movs	r2, #70	@ 0x46
 8000428:	801a      	strh	r2, [r3, #0]
		break;
 800042a:	e003      	b.n	8000434 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	2246      	movs	r2, #70	@ 0x46
 8000430:	801a      	strh	r2, [r3, #0]
		break;
 8000432:	bf00      	nop
	}

	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f042 020d 	orr.w	r2, r2, #13
 8000442:	601a      	str	r2, [r3, #0]
}
 8000444:	bf00      	nop
 8000446:	371c      	adds	r7, #28
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000

08000454 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	6039      	str	r1, [r7, #0]
 800045e:	71fb      	strb	r3, [r7, #7]
	//check ready to transmit flag
	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8000460:	bf00      	nop
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	69db      	ldr	r3, [r3, #28]
 8000468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f8      	beq.n	8000462 <SerialOutputChar+0xe>
	}

	//load data into transmit data register
	serial_port->UART->TDR = data;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	79fa      	ldrb	r2, [r7, #7]
 8000476:	b292      	uxth	r2, r2
 8000478:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <SerialOutputString>:

    // Read received character
    *data = (uint8_t)(serial_port->UART->RDR); 					// Reading RDR clears RXNE
}

void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
 800048e:	6039      	str	r1, [r7, #0]

	//continues to transmit while there are still characters to send
	while(*pt) {
 8000490:	e008      	b.n	80004a4 <SerialOutputString+0x1e>
		SerialOutputChar(*pt, serial_port);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	6839      	ldr	r1, [r7, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ffdb 	bl	8000454 <SerialOutputChar>
		pt++;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3301      	adds	r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d1f2      	bne.n	8000492 <SerialOutputString+0xc>
	}
	SerialOutputChar('\n', serial_port);
 80004ac:	6839      	ldr	r1, [r7, #0]
 80004ae:	200a      	movs	r0, #10
 80004b0:	f7ff ffd0 	bl	8000454 <SerialOutputChar>

}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <InterruptInputString>:

		USART1->CR1 |= USART_CR1_TXEIE; 						//enable transmit interrupt

}

void InterruptInputString(uint8_t buffer[], uint8_t terminating, uint32_t buffer_size, SerialPort *serial_port){
 80004bc:	b480      	push	{r7}
 80004be:	b087      	sub	sp, #28
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	607a      	str	r2, [r7, #4]
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	460b      	mov	r3, r1
 80004ca:	72fb      	strb	r3, [r7, #11]
	//check terminating character has not been received and buffer is not full
	if((counter > 0) && (buffer[counter - 1] == terminating) || counter >= buffer_size){
 80004cc:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <InterruptInputString+0x74>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d008      	beq.n	80004e6 <InterruptInputString+0x2a>
 80004d4:	4b16      	ldr	r3, [pc, #88]	@ (8000530 <InterruptInputString+0x74>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	3b01      	subs	r3, #1
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	4413      	add	r3, r2
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	7afa      	ldrb	r2, [r7, #11]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d005      	beq.n	80004f2 <InterruptInputString+0x36>
 80004e6:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <InterruptInputString+0x74>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	461a      	mov	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d805      	bhi.n	80004fe <InterruptInputString+0x42>
		uint8_t discard = (uint8_t)(serial_port->UART->RDR);	//discard excess characters
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	75fb      	strb	r3, [r7, #23]
	if((counter > 0) && (buffer[counter - 1] == terminating) || counter >= buffer_size){
 80004fc:	e011      	b.n	8000522 <InterruptInputString+0x66>
	}
	//otherwise load next character into buffer
	else{
		buffer[counter] = (uint8_t)(serial_port->UART->RDR);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000504:	b29a      	uxth	r2, r3
 8000506:	4b0a      	ldr	r3, [pc, #40]	@ (8000530 <InterruptInputString+0x74>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4619      	mov	r1, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	440b      	add	r3, r1
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
		counter++;
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <InterruptInputString+0x74>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b04      	ldr	r3, [pc, #16]	@ (8000530 <InterruptInputString+0x74>)
 800051e:	701a      	strb	r2, [r3, #0]
	}
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	371c      	adds	r7, #28
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000078 	.word	0x20000078

08000534 <TIM2_IRQHandler>:
// === Return the current timer period ===
uint32_t get_period(void) {
	return interval_ms;
}

void TIM2_IRQHandler(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) {
 8000538:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00e      	beq.n	8000564 <TIM2_IRQHandler+0x30>
		TIM2->SR &= ~TIM_SR_UIF;  // Clear update flag
 8000546:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800054a:	691b      	ldr	r3, [r3, #16]
 800054c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000550:	f023 0301 	bic.w	r3, r3, #1
 8000554:	6113      	str	r3, [r2, #16]

		if (user_callback) {
 8000556:	4b04      	ldr	r3, [pc, #16]	@ (8000568 <TIM2_IRQHandler+0x34>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d002      	beq.n	8000564 <TIM2_IRQHandler+0x30>
			user_callback();  // Periodic callback
 800055e:	4b02      	ldr	r3, [pc, #8]	@ (8000568 <TIM2_IRQHandler+0x34>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4798      	blx	r3
		}
	}
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000007c 	.word	0x2000007c

0800056c <TIM3_IRQHandler>:


void TIM3_IRQHandler(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {
 8000572:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <TIM3_IRQHandler+0x4c>)
 8000574:	691b      	ldr	r3, [r3, #16]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d018      	beq.n	80005b0 <TIM3_IRQHandler+0x44>
        TIM3->SR &= ~TIM_SR_UIF;  // Clear update flag
 800057e:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <TIM3_IRQHandler+0x4c>)
 8000580:	691b      	ldr	r3, [r3, #16]
 8000582:	4a0d      	ldr	r2, [pc, #52]	@ (80005b8 <TIM3_IRQHandler+0x4c>)
 8000584:	f023 0301 	bic.w	r3, r3, #1
 8000588:	6113      	str	r3, [r2, #16]

        if (oneshot_mode && oneshot_callback) {
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <TIM3_IRQHandler+0x50>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d00e      	beq.n	80005b0 <TIM3_IRQHandler+0x44>
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <TIM3_IRQHandler+0x54>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00a      	beq.n	80005b0 <TIM3_IRQHandler+0x44>
            callback_t cb = oneshot_callback;
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <TIM3_IRQHandler+0x54>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	607b      	str	r3, [r7, #4]
            oneshot_callback = 0;
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <TIM3_IRQHandler+0x54>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
            oneshot_mode = 0;
 80005a6:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <TIM3_IRQHandler+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
            cb();  // One-shot callback
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4798      	blx	r3
        }
    }
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40000400 	.word	0x40000400
 80005bc:	20000080 	.word	0x20000080
 80005c0:	20000084 	.word	0x20000084

080005c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c4:	480d      	ldr	r0, [pc, #52]	@ (80005fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480c      	ldr	r0, [pc, #48]	@ (8000600 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ce:	490d      	ldr	r1, [pc, #52]	@ (8000604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <LoopForever+0xe>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000610 <LoopForever+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005f2:	f000 f811 	bl	8000618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff fe99 	bl	800032c <main>

080005fa <LoopForever>:

LoopForever:
  b LoopForever
 80005fa:	e7fe      	b.n	80005fa <LoopForever>
  ldr   r0, =_estack
 80005fc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000608:	08000680 	.word	0x08000680
  ldr r2, =_sbss
 800060c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000610:	20000088 	.word	0x20000088

08000614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_2_IRQHandler>
	...

08000618 <__libc_init_array>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	4d0d      	ldr	r5, [pc, #52]	@ (8000650 <__libc_init_array+0x38>)
 800061c:	4c0d      	ldr	r4, [pc, #52]	@ (8000654 <__libc_init_array+0x3c>)
 800061e:	1b64      	subs	r4, r4, r5
 8000620:	10a4      	asrs	r4, r4, #2
 8000622:	2600      	movs	r6, #0
 8000624:	42a6      	cmp	r6, r4
 8000626:	d109      	bne.n	800063c <__libc_init_array+0x24>
 8000628:	4d0b      	ldr	r5, [pc, #44]	@ (8000658 <__libc_init_array+0x40>)
 800062a:	4c0c      	ldr	r4, [pc, #48]	@ (800065c <__libc_init_array+0x44>)
 800062c:	f000 f818 	bl	8000660 <_init>
 8000630:	1b64      	subs	r4, r4, r5
 8000632:	10a4      	asrs	r4, r4, #2
 8000634:	2600      	movs	r6, #0
 8000636:	42a6      	cmp	r6, r4
 8000638:	d105      	bne.n	8000646 <__libc_init_array+0x2e>
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000640:	4798      	blx	r3
 8000642:	3601      	adds	r6, #1
 8000644:	e7ee      	b.n	8000624 <__libc_init_array+0xc>
 8000646:	f855 3b04 	ldr.w	r3, [r5], #4
 800064a:	4798      	blx	r3
 800064c:	3601      	adds	r6, #1
 800064e:	e7f2      	b.n	8000636 <__libc_init_array+0x1e>
 8000650:	08000678 	.word	0x08000678
 8000654:	08000678 	.word	0x08000678
 8000658:	08000678 	.word	0x08000678
 800065c:	0800067c 	.word	0x0800067c

08000660 <_init>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	bf00      	nop
 8000664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000666:	bc08      	pop	{r3}
 8000668:	469e      	mov	lr, r3
 800066a:	4770      	bx	lr

0800066c <_fini>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	bf00      	nop
 8000670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000672:	bc08      	pop	{r3}
 8000674:	469e      	mov	lr, r3
 8000676:	4770      	bx	lr
