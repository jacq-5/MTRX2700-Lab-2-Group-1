/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

#include "serial.h"
#include "stm32f303xc.h"


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

uint8_t buffer[100];

void finished_transmission(uint8_t *rx_string, uint32_t bytes_sent) {
	// This function will be called after a transmission is complete

	volatile uint32_t test = 0;
	// make a very simple delay
	for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
		// waste time !
	}
}

// store a pointer to the function that is called when a button is pressed
// set a default value of NULL so that it won't be called until the
// function pointer is defined
void (*when_receiving_data)() = 0x00;

void USART1_EXTI25_IRQHandler(void)
{
	// run the button press handler (make sure it is not null first !)
	if (when_receiving_data != 0x00) {
		when_receiving_data(buffer, &USART1_PORT);
	}

	// reset the interrupt (so it doesn't keep firing until the next trigger)
	USART1->CR1 &= ~USART_CR1_RXNEIE;
}

//unsure if I need this whole thing
void enable_interrupt() {
	/*// Enable the system configuration controller (SYSCFG in RCC)
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;

		// External Interrupts details on large manual page 294)
		// PA0 is on interrupt EXTI0 large manual - page 250
		// EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
		SYSCFG->EXTICR[5] = SYSCFG_EXTICR1_EXTI5_PC;

		//  Select EXTI0 interrupt on rising edge
		EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)

		// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
		EXTI->IMR |= EXTI_IMR_MR0;

		// Tell the NVIC module that EXTI0 interrupts should be handled
		NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
		NVIC_EnableIRQ(EXTI0_IRQn);*/

    // Disable interrupts while messing around with settings
    __disable_irq();

    USART1->CR1 |= USART_CR1_RXNEIE;

    // 3. Enable USART1 interrupt in NVIC
    NVIC_SetPriority(USART1_IRQn, 1);  // Set priority for USART1 interrupt
    NVIC_EnableIRQ(USART1_IRQn);  // Enable USART1 interrupt

    // 4. Re-enable interrupts
    __enable_irq();
}



int main(void)
{
	//uint8_t *string_to_send = "This is a string !\r\n";
	//uint8_t *send = "sending!!! \r\n";
	//uint8_t buffer[100];

	void (*completion_function)(uint8_t *, uint32_t) = &finished_transmission;

	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);

	// set the interrupt handling function
	when_receiving_data = &SerialInputString;

	// enable the interrupt for the USART
	enable_interrupt();
	//transmit string
	//SerialOutputString(send, &USART1_PORT);

	//receive string
	//SerialInputString(buffer, &USART1_PORT);

	/* Loop forever */
		for(;;) {}

}

