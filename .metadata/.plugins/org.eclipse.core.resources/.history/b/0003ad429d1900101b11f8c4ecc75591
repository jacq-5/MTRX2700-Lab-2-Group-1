#include "serial.h"

#include "stm32f303xc.h"



// global variable and callback pointer
static uint8_t led_state = 0;			// stores current LED output state (8 bits)
// The variable led_state is declared as static within the .c file, making it private to the file and inaccessible outside of the module. This ensures that the LED state is encapsulated and cannot be directly accessed or modified by other parts of the program.
// points to the button_callback function each time the button is pressed
void (*button_callback)() = NULL;		// function pointer to handle button press events

// Returns the current LED state- allows other parts of the program to retrieve the LED state without directly accessing the led_state variable.
uint8_t get_led_state() {
    return led_state;
}

// Set the LED state with encapsulation
void set_led_state(uint8_t state) {
    led_state = state;
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1; // updates led_state and writes it to GPIOE output register (specifically bits 8–15, hence the offset).
    // To control LEDs, need to write to bits 8-15 of ODR (output data register)
    // Note that it is only uint8_t here (compared to uint16_t above) because each LED (PE8-15) uses only 1 bit in the ODR register compared to 2 in the MODER register.
    *led_register = state;
}


// Set the button press callback function, Allows registering a function to call when the button is pressed
// The function set_button_callback() allows the user to pass in a function pointer. This pointer is stored in the button_callback variable, so whenever the button is pressed, the corresponding function can be called.
void set_button_callback(void (*callback)()) { // *callback pointer
    button_callback = callback;
}

void initialise_digital_io() {
    // Configure PE8–PE15 as outputs (LEDs)
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
    *led_output_registers = 0x5555;

    // Configure PA0 (button) as input
    GPIOA->MODER &= ~(0x3 << (0 * 2));
}

// button callback for LED
// Rotates the LED pattern left.
// The MSB wraps around to LSB. Creates a "chasing" LED effect.
void chase_led_callback() {
    uint8_t state = get_led_state();
    state = (state << 1) | ((state & 0x80) >> 7);  // Rotate left by wrapping leftmost bit to rightmost position
    set_led_state(state);
}

void initialise_leds(void) {
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
    *led_output_registers = 0x5555;
}

void set_led_state(uint8_t state) {
    led_state = state;
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
    *led_register = state;
}

uint8_t get_led_state(void) {
    return led_state;
}

void toggle_leds(void) {
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
    *led_register ^= led_state;
}

