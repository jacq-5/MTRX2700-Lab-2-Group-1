/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

#include "serial.h"
#include "stm32f303xc.h"


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//initialise static variables
uint8_t buffer[32];
uint8_t double_buffer[2][32];

// This function will be called after a transmission is complete [callback function]
void finished_transmission(uint8_t *rx_string, uint32_t bytes_sent) {
	rx_string[bytes_sent] = '\0'; 		//end of string becomes terminating character so it transmits correctly
	SerialOutputString(rx_string, &USART1_PORT);
}

void (*when_receiving_data_db)(uint8_t [][32], SerialPort *) = 0x00;
//void (*when_receiving_data)(uint8_t *, SerialPort *) = 0x00;
void (*when_receiving_data)(uint8_t [], SerialPort *) = 0x00;
void (*when_sending_data)() = 0x00;

void USART1_EXTI25_IRQHandler(void)
{
	// run the USART receive handler (make sure it is not null first !)
	if (when_receiving_data != 0x00) {
		when_receiving_data(buffer, &USART1_PORT);
	}

	// run the USART receive handler for double buffer (make sure it is not null first !)
	if (when_receiving_data_db != 0x00) {
			when_receiving_data_db(buffer, &USART1_PORT);
		}

	// run the USART transmit handler (make sure it is not null first !)
	if (when_sending_data != 0x00) {
		when_sending_data(buffer[0], &USART1_PORT); //try getting rid of these arguments, don't need them
	}
}

//unsure if I need this whole thing
void enable_interrupt() {

    // Disable interrupts while messing around with settings
    __disable_irq();

    USART1->CR1 |= USART_CR1_RXNEIE;	//enable receive interrupt

	// Enable USART1 interrupt in NVIC
	NVIC_SetPriority(USART1_IRQn, 1);  // Set priority for USART1 interrupt
	NVIC_EnableIRQ(USART1_IRQn);  // allows USART1 interrupt to occur

    // Re-enable interrupts
    __enable_irq();
}



int main(void)
{
//excersise 2 Serial Ports
	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission); //set callback function

	//part (a) and (b)
	uint8_t terminating = '#';
	//SerialOutputString(send, &USART1_PORT);					//transmit string
	SerialInputString(buffer, &USART1_PORT, terminating);		//receive string

	//part (c)
	//set the interrupt handling function
	//when_receiving_data = &InterruptInputString;
	//enable_interrupt();											// enable the interrupt for the USART

	//part (d)
	//InterruptOutputString();

	//enable_interrupt();											// enable the interrupt for the USART
	//when_receiving_data_db = &SerialInputStringdb;

	/*while(1){
		InputLogic(double_buffer);
	}*/

	//integration
	/*uint8_t terminating = '#';
	initialise_leds();
	enable_clocks();                     // Enable GPIOE and TIM2 clocks
	initialise_board();
	SerialInputString(buffer, &USART1_PORT, terminating);*/

	/* Loop forever */
		for(;;) {}

}

