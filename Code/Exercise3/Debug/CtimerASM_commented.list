
CtimerASM_commented.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000580  08000588  00001588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000580  08000580  00001588  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000580  08000580  00001588  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000580  08000588  00001588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000580  08000580  00001580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000584  08000584  00001584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001588  2**0
                  CONTENTS
 10 .bss          00000030  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000955  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000276  00000000  00000000  00001f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00002188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000075  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014cbb  00000000  00000000  000022a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000007c2  00000000  00000000  00016f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072779  00000000  00000000  00017722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00089e9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000020c  00000000  00000000  00089ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0008a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000568 	.word	0x08000568

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000568 	.word	0x08000568

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <enable_clocks>:
static uint8_t oneshot_mode = 0;         // 0 = normal, 1 = oneshot
static callback_t oneshot_callback = 0;  // Separate callback for one-shot


// === Enable clocks for GPIOE and TIM2 ===
void enable_clocks() {
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	RCC->AHBENR  |= RCC_AHBENR_GPIOEEN;
 8000214:	4b0b      	ldr	r3, [pc, #44]	@ (8000244 <enable_clocks+0x34>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a0a      	ldr	r2, [pc, #40]	@ (8000244 <enable_clocks+0x34>)
 800021a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800021e:	6153      	str	r3, [r2, #20]
	LDR R1, [R0]
	ORR R1, R1, #(1 << 21)    @ GPIOEEN
	STR R1, [R0]
	*/

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000220:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <enable_clocks+0x34>)
 8000222:	69db      	ldr	r3, [r3, #28]
 8000224:	4a07      	ldr	r2, [pc, #28]	@ (8000244 <enable_clocks+0x34>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	61d3      	str	r3, [r2, #28]
	LDR R1, [R0]
	ORR R1, R1, #(1 << 0)     @ TIM2EN
	STR R1, [R0]
	*/

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800022c:	4b05      	ldr	r3, [pc, #20]	@ (8000244 <enable_clocks+0x34>)
 800022e:	69db      	ldr	r3, [r3, #28]
 8000230:	4a04      	ldr	r2, [pc, #16]	@ (8000244 <enable_clocks+0x34>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	61d3      	str	r3, [r2, #28]
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000

08000248 <initialise_board>:

// === Configure PE8â€“PE15 as output ===
void initialise_board() {
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800024e:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <initialise_board+0x20>)
 8000250:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000258:	801a      	strh	r2, [r3, #0]
	LDR R0, =0x48011000       @ GPIOE base
	ADD R0, R0, #0x04         @ MODER offset
	LDR R1, =0x5555
	STR R1, [R0, #0x04]       @ Write to upper half of MODER
	*/
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	48001002 	.word	0x48001002

0800026c <reset_period>:

	NVIC_EnableIRQ(TIM2_IRQn);           // NVIC global IRQ enable
}

// === Change the timer period dynamically ===
void reset_period(uint32_t period) {
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	interval_ms = period;
 8000274:	4a0c      	ldr	r2, [pc, #48]	@ (80002a8 <reset_period+0x3c>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]
	TIM2->ARR = interval_ms;
 800027a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800027e:	4b0a      	ldr	r3, [pc, #40]	@ (80002a8 <reset_period+0x3c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM2->CNT = 0;
 8000284:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000288:	2200      	movs	r2, #0
 800028a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->EGR |= TIM_EGR_UG;
 800028c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6153      	str	r3, [r2, #20]

	LDR R0, =0x40000014       @ TIM2->EGR
	MOV R1, #1
	STR R1, [R0]
	*/
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	20000020 	.word	0x20000020

080002ac <TIM2_IRQHandler>:
// === Return the current timer period ===
uint32_t get_period(void) {
	return interval_ms;
}

void TIM2_IRQHandler(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) {
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b4:	691b      	ldr	r3, [r3, #16]
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00e      	beq.n	80002dc <TIM2_IRQHandler+0x30>
		TIM2->SR &= ~TIM_SR_UIF;  // Clear update flag
 80002be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c8:	f023 0301 	bic.w	r3, r3, #1
 80002cc:	6113      	str	r3, [r2, #16]

		if (user_callback) {
 80002ce:	4b04      	ldr	r3, [pc, #16]	@ (80002e0 <TIM2_IRQHandler+0x34>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d002      	beq.n	80002dc <TIM2_IRQHandler+0x30>
			user_callback();  // Periodic callback
 80002d6:	4b02      	ldr	r3, [pc, #8]	@ (80002e0 <TIM2_IRQHandler+0x34>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4798      	blx	r3
		}
	}
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {
 80002ea:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <TIM3_IRQHandler+0x4c>)
 80002ec:	691b      	ldr	r3, [r3, #16]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d018      	beq.n	8000328 <TIM3_IRQHandler+0x44>
        TIM3->SR &= ~TIM_SR_UIF;  // Clear update flag
 80002f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <TIM3_IRQHandler+0x4c>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000330 <TIM3_IRQHandler+0x4c>)
 80002fc:	f023 0301 	bic.w	r3, r3, #1
 8000300:	6113      	str	r3, [r2, #16]

        if (oneshot_mode && oneshot_callback) {
 8000302:	4b0c      	ldr	r3, [pc, #48]	@ (8000334 <TIM3_IRQHandler+0x50>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d00e      	beq.n	8000328 <TIM3_IRQHandler+0x44>
 800030a:	4b0b      	ldr	r3, [pc, #44]	@ (8000338 <TIM3_IRQHandler+0x54>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d00a      	beq.n	8000328 <TIM3_IRQHandler+0x44>
            callback_t cb = oneshot_callback;
 8000312:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <TIM3_IRQHandler+0x54>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	607b      	str	r3, [r7, #4]
            oneshot_callback = 0;
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <TIM3_IRQHandler+0x54>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
            oneshot_mode = 0;
 800031e:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <TIM3_IRQHandler+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
            cb();  // One-shot callback
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4798      	blx	r3
        }
    }
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40000400 	.word	0x40000400
 8000334:	20000024 	.word	0x20000024
 8000338:	20000028 	.word	0x20000028

0800033c <start_oneshot_timer_TIM3>:



void start_oneshot_timer_TIM3(uint32_t delay_ms, callback_t cb) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
    oneshot_mode = 1;
 8000346:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <start_oneshot_timer_TIM3+0x7c>)
 8000348:	2201      	movs	r2, #1
 800034a:	701a      	strb	r2, [r3, #0]
    oneshot_callback = cb;
 800034c:	4a1b      	ldr	r2, [pc, #108]	@ (80003bc <start_oneshot_timer_TIM3+0x80>)
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	6013      	str	r3, [r2, #0]

    TIM3->CR1 = 0;         // Disable timer
 8000352:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
    TIM3->CNT = 0;
 8000358:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM3->PSC = 7999;      // 1ms tick (8MHz / (7999 + 1) = 1kHz)
 800035e:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 8000360:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = delay_ms;
 8000366:	4a16      	ldr	r2, [pc, #88]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	62d3      	str	r3, [r2, #44]	@ 0x2c

    TIM3->EGR |= TIM_EGR_UG;  // <<< FORCE UPDATE >>> (loads PSC & ARR)
 800036c:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a13      	ldr	r2, [pc, #76]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6153      	str	r3, [r2, #20]
    TIM3->SR &= ~TIM_SR_UIF;   // <<< Clear any pending update flag
 8000378:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	4a10      	ldr	r2, [pc, #64]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 800037e:	f023 0301 	bic.w	r3, r3, #1
 8000382:	6113      	str	r3, [r2, #16]

    TIM3->DIER |= TIM_DIER_UIE;   // Enable interrupt
 8000384:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_OPM;     // One-pulse mode
 8000390:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0a      	ldr	r2, [pc, #40]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= TIM_CR1_CEN;     // Start timer
 800039c:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a07      	ldr	r2, [pc, #28]	@ (80003c0 <start_oneshot_timer_TIM3+0x84>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(TIM3_IRQn);    // Enable TIM3 interrupt
 80003a8:	201d      	movs	r0, #29
 80003aa:	f7ff ff13 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000024 	.word	0x20000024
 80003bc:	20000028 	.word	0x20000028
 80003c0:	40000400 	.word	0x40000400

080003c4 <blink_leds36710>:



// === Blink LEDs on PE8â€“15 ===
void blink_leds36710(void) {
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
    uint8_t *led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80003ca:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <blink_leds36710+0x50>)
 80003cc:	607b      	str	r3, [r7, #4]
    static uint8_t state = 0;
    const uint8_t mask = 0b10000000;  // Blink only PE9, PE11, PE13, PE15
 80003ce:	2380      	movs	r3, #128	@ 0x80
 80003d0:	70fb      	strb	r3, [r7, #3]

    state ^= mask;  // Toggle only bits in the mask
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <blink_leds36710+0x54>)
 80003d4:	781a      	ldrb	r2, [r3, #0]
 80003d6:	78fb      	ldrb	r3, [r7, #3]
 80003d8:	4053      	eors	r3, r2
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <blink_leds36710+0x54>)
 80003de:	701a      	strb	r2, [r3, #0]
    *led_output_register = (*led_output_register & ~mask) | (state & mask);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b25a      	sxtb	r2, r3
 80003e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003ea:	43db      	mvns	r3, r3
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	4013      	ands	r3, r2
 80003f0:	b25a      	sxtb	r2, r3
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <blink_leds36710+0x54>)
 80003f4:	7819      	ldrb	r1, [r3, #0]
 80003f6:	78fb      	ldrb	r3, [r7, #3]
 80003f8:	400b      	ands	r3, r1
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	b25b      	sxtb	r3, r3
 80003fe:	4313      	orrs	r3, r2
 8000400:	b25b      	sxtb	r3, r3
 8000402:	b2da      	uxtb	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	701a      	strb	r2, [r3, #0]
	LDR R0, =0x48011014       @ GPIOE->ODR
	LDRB R1, [R0, #1]
	EOR R1, R1, #0xFF
	STRB R1, [R0, #1]
	*/
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	48001015 	.word	0x48001015
 8000418:	2000002c 	.word	0x2000002c

0800041c <blink_leds4895>:
// === Blink LEDs on PE8â€“15 ===
void blink_leds4895(void) {
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
    uint8_t *led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000422:	4b12      	ldr	r3, [pc, #72]	@ (800046c <blink_leds4895+0x50>)
 8000424:	607b      	str	r3, [r7, #4]
    static uint8_t state = 0;
    const uint8_t mask = 0b00000001;  // Blink PE8, PE10, PE12, PE14
 8000426:	2301      	movs	r3, #1
 8000428:	70fb      	strb	r3, [r7, #3]

    state ^= mask;
 800042a:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <blink_leds4895+0x54>)
 800042c:	781a      	ldrb	r2, [r3, #0]
 800042e:	78fb      	ldrb	r3, [r7, #3]
 8000430:	4053      	eors	r3, r2
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <blink_leds4895+0x54>)
 8000436:	701a      	strb	r2, [r3, #0]
    *led_output_register = (*led_output_register & ~mask) | (state & mask);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	b25a      	sxtb	r2, r3
 800043e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000442:	43db      	mvns	r3, r3
 8000444:	b25b      	sxtb	r3, r3
 8000446:	4013      	ands	r3, r2
 8000448:	b25a      	sxtb	r2, r3
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <blink_leds4895+0x54>)
 800044c:	7819      	ldrb	r1, [r3, #0]
 800044e:	78fb      	ldrb	r3, [r7, #3]
 8000450:	400b      	ands	r3, r1
 8000452:	b2db      	uxtb	r3, r3
 8000454:	b25b      	sxtb	r3, r3
 8000456:	4313      	orrs	r3, r2
 8000458:	b25b      	sxtb	r3, r3
 800045a:	b2da      	uxtb	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	701a      	strb	r2, [r3, #0]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	48001015 	.word	0x48001015
 8000470:	2000002d 	.word	0x2000002d

08000474 <main>:


// === Main program ===
int main(void) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
	enable_clocks();                     // Enable GPIOE and TIM2 clocks
 800047a:	f7ff fec9 	bl	8000210 <enable_clocks>
	initialise_board();                  // Set PE8â€“15 as output
 800047e:	f7ff fee3 	bl	8000248 <initialise_board>
	// timer_init(1000, blink_leds36710);        // Call blink_leds every 1000ms

	for (volatile int i = 0; i < 8000000; ++i);  // Simple delay
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	e002      	b.n	800048e <main+0x1a>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3301      	adds	r3, #1
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a0c      	ldr	r2, [pc, #48]	@ (80004c4 <main+0x50>)
 8000492:	4293      	cmp	r3, r2
 8000494:	dbf8      	blt.n	8000488 <main+0x14>
	blink_leds36710();
 8000496:	f7ff ff95 	bl	80003c4 <blink_leds36710>
	start_oneshot_timer_TIM3(2000, blink_leds4895);  // Call blink_leds4895 after 2 seconds
 800049a:	490b      	ldr	r1, [pc, #44]	@ (80004c8 <main+0x54>)
 800049c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004a0:	f7ff ff4c 	bl	800033c <start_oneshot_timer_TIM3>

	for (volatile int i = 0; i < 8000000; ++i);  // Simple delay
 80004a4:	2300      	movs	r3, #0
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	e002      	b.n	80004b0 <main+0x3c>
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	3301      	adds	r3, #1
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	4a04      	ldr	r2, [pc, #16]	@ (80004c4 <main+0x50>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	dbf8      	blt.n	80004aa <main+0x36>
	reset_period(5000);                  // Change period to 5s
 80004b8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004bc:	f7ff fed6 	bl	800026c <reset_period>


	while (1) {
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <main+0x4c>
 80004c4:	007a1200 	.word	0x007a1200
 80004c8:	0800041d 	.word	0x0800041d

080004cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004cc:	480d      	ldr	r0, [pc, #52]	@ (8000504 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d4:	480c      	ldr	r0, [pc, #48]	@ (8000508 <LoopForever+0x6>)
  ldr r1, =_edata
 80004d6:	490d      	ldr	r1, [pc, #52]	@ (800050c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000510 <LoopForever+0xe>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004dc:	e002      	b.n	80004e4 <LoopCopyDataInit>

080004de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e2:	3304      	adds	r3, #4

080004e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e8:	d3f9      	bcc.n	80004de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000518 <LoopForever+0x16>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f0:	e001      	b.n	80004f6 <LoopFillZerobss>

080004f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f4:	3204      	adds	r2, #4

080004f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f8:	d3fb      	bcc.n	80004f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004fa:	f000 f811 	bl	8000520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fe:	f7ff ffb9 	bl	8000474 <main>

08000502 <LoopForever>:

LoopForever:
  b LoopForever
 8000502:	e7fe      	b.n	8000502 <LoopForever>
  ldr   r0, =_estack
 8000504:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800050c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000510:	08000588 	.word	0x08000588
  ldr r2, =_sbss
 8000514:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000518:	20000030 	.word	0x20000030

0800051c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800051c:	e7fe      	b.n	800051c <ADC1_2_IRQHandler>
	...

08000520 <__libc_init_array>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	4d0d      	ldr	r5, [pc, #52]	@ (8000558 <__libc_init_array+0x38>)
 8000524:	4c0d      	ldr	r4, [pc, #52]	@ (800055c <__libc_init_array+0x3c>)
 8000526:	1b64      	subs	r4, r4, r5
 8000528:	10a4      	asrs	r4, r4, #2
 800052a:	2600      	movs	r6, #0
 800052c:	42a6      	cmp	r6, r4
 800052e:	d109      	bne.n	8000544 <__libc_init_array+0x24>
 8000530:	4d0b      	ldr	r5, [pc, #44]	@ (8000560 <__libc_init_array+0x40>)
 8000532:	4c0c      	ldr	r4, [pc, #48]	@ (8000564 <__libc_init_array+0x44>)
 8000534:	f000 f818 	bl	8000568 <_init>
 8000538:	1b64      	subs	r4, r4, r5
 800053a:	10a4      	asrs	r4, r4, #2
 800053c:	2600      	movs	r6, #0
 800053e:	42a6      	cmp	r6, r4
 8000540:	d105      	bne.n	800054e <__libc_init_array+0x2e>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	f855 3b04 	ldr.w	r3, [r5], #4
 8000548:	4798      	blx	r3
 800054a:	3601      	adds	r6, #1
 800054c:	e7ee      	b.n	800052c <__libc_init_array+0xc>
 800054e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000552:	4798      	blx	r3
 8000554:	3601      	adds	r6, #1
 8000556:	e7f2      	b.n	800053e <__libc_init_array+0x1e>
 8000558:	08000580 	.word	0x08000580
 800055c:	08000580 	.word	0x08000580
 8000560:	08000580 	.word	0x08000580
 8000564:	08000584 	.word	0x08000584

08000568 <_init>:
 8000568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056a:	bf00      	nop
 800056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056e:	bc08      	pop	{r3}
 8000570:	469e      	mov	lr, r3
 8000572:	4770      	bx	lr

08000574 <_fini>:
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	bf00      	nop
 8000578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057a:	bc08      	pop	{r3}
 800057c:	469e      	mov	lr, r3
 800057e:	4770      	bx	lr
