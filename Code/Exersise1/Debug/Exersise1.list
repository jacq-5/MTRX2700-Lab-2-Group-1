
Exersise1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000654  0800065c  0000165c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000654  08000654  0000165c  2**0
                  CONTENTS
  4 .ARM          00000000  08000654  08000654  0000165c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000654  0800065c  0000165c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000654  08000654  00001654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000658  08000658  00001658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000165c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000165c  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001370  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000055d  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00002f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a6  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014fc9  00000000  00000000  000030fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000121f  00000000  00000000  000180c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072a8f  00000000  00000000  000192e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008bd75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002b8  00000000  00000000  0008bdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0008c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800063c 	.word	0x0800063c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800063c 	.word	0x0800063c

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <initialise_button>:
static void (*button_callback)(void) = 0;


// Initialize the user button on PA0 as input.

void initialise_button(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;               // Enable GPIOA clock
 8000268:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <initialise_button+0x2c>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a08      	ldr	r2, [pc, #32]	@ (8000290 <initialise_button+0x2c>)
 800026e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000272:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(0x3 << (0 * 2));               // Clear MODER bits for PA0 (set as input)
 8000274:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800027e:	f023 0303 	bic.w	r3, r3, #3
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000

08000294 <enable_button_interrupt>:


// Configure EXTI0 to trigger interrupt on rising edge of PA0.
void enable_button_interrupt(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000298:	b672      	cpsid	i
}
 800029a:	bf00      	nop
    __disable_irq();                                 // Disable global interrupts during setup

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;            // Enable SYSCFG clock
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <enable_button_interrupt+0x48>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <enable_button_interrupt+0x48>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6193      	str	r3, [r2, #24]
    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;     // Map EXTI0 to PA0
 80002a8:	4b0d      	ldr	r3, [pc, #52]	@ (80002e0 <enable_button_interrupt+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
    EXTI->RTSR |= EXTI_RTSR_TR0;                     // Trigger on rising edge
 80002ae:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <enable_button_interrupt+0x50>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	4a0c      	ldr	r2, [pc, #48]	@ (80002e4 <enable_button_interrupt+0x50>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR0;                       // Unmask interrupt line
 80002ba:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <enable_button_interrupt+0x50>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a09      	ldr	r2, [pc, #36]	@ (80002e4 <enable_button_interrupt+0x50>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(EXTI0_IRQn, 1);                 // Set interrupt priority
 80002c6:	2101      	movs	r1, #1
 80002c8:	2006      	movs	r0, #6
 80002ca:	f7ff ffa1 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);                      // Enable EXTI0 interrupt
 80002ce:	2006      	movs	r0, #6
 80002d0:	f7ff ff80 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002d4:	b662      	cpsie	i
}
 80002d6:	bf00      	nop

    __enable_irq();                                  // Re-enable global interrupts
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010000 	.word	0x40010000
 80002e4:	40010400 	.word	0x40010400

080002e8 <set_button_callback>:

// Assign a callback function to be triggered when the button is pressed.
void set_button_callback(void (*callback)(void)) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
    button_callback = callback;						// callback Pointer to the function to call on button press.
 80002f0:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <set_button_callback+0x1c>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	6013      	str	r3, [r2, #0]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	2000001c 	.word	0x2000001c

08000308 <EXTI0_IRQHandler>:
uint8_t is_button_pressed(void) {
    return (GPIOA->IDR & 0x01);						// Read the current button state
}

// EXTI0 interrupt handler – calls the registered button callback function.
void EXTI0_IRQHandler(void) {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR0) {
 800030c:	4b0a      	ldr	r3, [pc, #40]	@ (8000338 <EXTI0_IRQHandler+0x30>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f003 0301 	and.w	r3, r3, #1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d00c      	beq.n	8000332 <EXTI0_IRQHandler+0x2a>
        EXTI->PR |= EXTI_PR_PR0;                     // Clear pending interrupt
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <EXTI0_IRQHandler+0x30>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a06      	ldr	r2, [pc, #24]	@ (8000338 <EXTI0_IRQHandler+0x30>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6153      	str	r3, [r2, #20]
        if (button_callback != 0) {
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <EXTI0_IRQHandler+0x34>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d002      	beq.n	8000332 <EXTI0_IRQHandler+0x2a>
            button_callback();                       // Call registered function
 800032c:	4b03      	ldr	r3, [pc, #12]	@ (800033c <EXTI0_IRQHandler+0x34>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4798      	blx	r3
        }
    }
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010400 	.word	0x40010400
 800033c:	2000001c 	.word	0x2000001c

08000340 <initialise_leds>:

#include "stm32f303xc.h"

static uint8_t led_state = 0;  // Only accessible inside this file

void initialise_leds(void) {
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;				// Enable clock for GPIOE
 8000346:	4b09      	ldr	r3, [pc, #36]	@ (800036c <initialise_leds+0x2c>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a08      	ldr	r2, [pc, #32]	@ (800036c <initialise_leds+0x2c>)
 800034c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000350:	6153      	str	r3, [r2, #20]
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1; // Configure PE8 to PE15 (bits 16–31 of MODER) as general purpose output mode (01), Cast to 16-bit pointer and offset by +1 to access the upper half (pins 8–15)
 8000352:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <initialise_leds+0x30>)
 8000354:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;					 // 0b0101010101010101 → All 8 pins set to output
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f245 5255 	movw	r2, #21845	@ 0x5555
 800035c:	801a      	strh	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	48001002 	.word	0x48001002

08000374 <set_led_state>:

void set_led_state(uint8_t state) {
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
    led_state = state;								// Save current state to allow toggling later
 800037e:	4a07      	ldr	r2, [pc, #28]	@ (800039c <set_led_state+0x28>)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	7013      	strb	r3, [r2, #0]
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;	// Use an 8-bit pointer offset by +1 byte to access those bits directly.
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <set_led_state+0x2c>)
 8000386:	60fb      	str	r3, [r7, #12]
    *led_register = state;							// Write state to the LEDs
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	79fa      	ldrb	r2, [r7, #7]
 800038c:	701a      	strb	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000020 	.word	0x20000020
 80003a0:	48001015 	.word	0x48001015

080003a4 <get_led_state>:

uint8_t get_led_state(void) {
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
    return led_state;
 80003a8:	4b03      	ldr	r3, [pc, #12]	@ (80003b8 <get_led_state+0x14>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000020 	.word	0x20000020

080003bc <toggle_leds>:

void toggle_leds(void) {
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;	// Access the same 8-bit region of GPIOE->ODR (bits 8–15)
 80003c2:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <toggle_leds+0x28>)
 80003c4:	607b      	str	r3, [r7, #4]
    *led_register ^= led_state;								// Toggle current LED bits
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <toggle_leds+0x2c>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	4053      	eors	r3, r2
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	701a      	strb	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	48001015 	.word	0x48001015
 80003e8:	20000020 	.word	0x20000020

080003ec <__NVIC_EnableIRQ>:
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db0b      	blt.n	8000416 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 021f 	and.w	r2, r3, #31
 8000404:	4907      	ldr	r1, [pc, #28]	@ (8000424 <__NVIC_EnableIRQ+0x38>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	095b      	lsrs	r3, r3, #5
 800040c:	2001      	movs	r0, #1
 800040e:	fa00 f202 	lsl.w	r2, r0, r2
 8000412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e100 	.word	0xe000e100

08000428 <calc_timer_interval>:
#include "led.h"
#include "button.h"
#include <stddef.h>

// Modular Timer Functions
void calc_timer_interval(uint32_t interval_ms) {
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
    TIM2->PSC = 8000 - 1;                      // Prescaler: 8000 → 1 ms tick (8 MHz / 8000 = 1 kHz)
 8000430:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000434:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000438:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = interval_ms - 1;               // Auto-reload to match interval: number of milliseconds - 1
 800043a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3b01      	subs	r3, #1
 8000442:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CNT = 0;                             // Reset counter
 8000444:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM2->EGR = TIM_EGR_UG;                    // Force update event
 800044c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000450:	2201      	movs	r2, #1
 8000452:	615a      	str	r2, [r3, #20]
    TIM2->SR &= ~TIM_SR_UIF;                   // Clear the interrupt flag
 8000454:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800045e:	f023 0301 	bic.w	r3, r3, #1
 8000462:	6113      	str	r3, [r2, #16]
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <set_timer>:

// Enable TIM2 clock
void set_timer(uint32_t interval_ms) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000478:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <set_timer+0x58>)
 800047a:	69db      	ldr	r3, [r3, #28]
 800047c:	4a12      	ldr	r2, [pc, #72]	@ (80004c8 <set_timer+0x58>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	61d3      	str	r3, [r2, #28]

    TIM2->CR1 &= ~TIM_CR1_CEN;                // Stop the timer while configuring
 8000484:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	6013      	str	r3, [r2, #0]
    calc_timer_interval(interval_ms);          // Set interval and force reload
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ffc7 	bl	8000428 <calc_timer_interval>

    TIM2->DIER |= TIM_DIER_UIE;               // Enable update interrupt
 800049a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);                // Enable IRQ in NVIC
 80004aa:	201c      	movs	r0, #28
 80004ac:	f7ff ff9e 	bl	80003ec <__NVIC_EnableIRQ>

    TIM2->CR1 |= TIM_CR1_CEN;                 // Start the timer
 80004b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6013      	str	r3, [r2, #0]
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000

080004cc <TIM2_IRQHandler>:

// Timer ISR
void TIM2_IRQHandler(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 80004d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004d4:	691b      	ldr	r3, [r3, #16]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d009      	beq.n	80004f2 <TIM2_IRQHandler+0x26>
        TIM2->SR &= ~TIM_SR_UIF;              // Clear interrupt flag
 80004de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004e2:	691b      	ldr	r3, [r3, #16]
 80004e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004e8:	f023 0301 	bic.w	r3, r3, #1
 80004ec:	6113      	str	r3, [r2, #16]
        toggle_leds();                        // Your custom toggle function
 80004ee:	f7ff ff65 	bl	80003bc <toggle_leds>
    }
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <chase_led_callback>:

// Button callback
void chase_led_callback(void) {
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
    uint8_t state = get_led_state();		 		// Read current LED state
 80004fc:	f7ff ff52 	bl	80003a4 <get_led_state>
 8000500:	4603      	mov	r3, r0
 8000502:	71fb      	strb	r3, [r7, #7]
    state = (state << 1) | ((state & 0x80) >> 7);   // Rotate left
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	b25a      	sxtb	r2, r3
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	09db      	lsrs	r3, r3, #7
 800050e:	b2db      	uxtb	r3, r3
 8000510:	b25b      	sxtb	r3, r3
 8000512:	4313      	orrs	r3, r2
 8000514:	b25b      	sxtb	r3, r3
 8000516:	71fb      	strb	r3, [r7, #7]
    set_led_state(state);							// Update LED state
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ff2a 	bl	8000374 <set_led_state>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <main>:

// Main function
int main(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
    initialise_leds();
 800052e:	f7ff ff07 	bl	8000340 <initialise_leds>
    initialise_button();
 8000532:	f7ff fe97 	bl	8000264 <initialise_button>

    // Initialisation check - blink LED quickly 3 times
    for (int i = 0; i < 3; ++i) {
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e01c      	b.n	8000576 <main+0x4e>
        set_led_state(0xFF);
 800053c:	20ff      	movs	r0, #255	@ 0xff
 800053e:	f7ff ff19 	bl	8000374 <set_led_state>
        for (volatile int j = 0; j < 100000; ++j);
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	e002      	b.n	800054e <main+0x26>
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	3301      	adds	r3, #1
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a11      	ldr	r2, [pc, #68]	@ (8000598 <main+0x70>)
 8000552:	4293      	cmp	r3, r2
 8000554:	ddf8      	ble.n	8000548 <main+0x20>
        set_led_state(0x00);
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff ff0c 	bl	8000374 <set_led_state>
        for (volatile int j = 0; j < 100000; ++j);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	e002      	b.n	8000568 <main+0x40>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <main+0x70>)
 800056c:	4293      	cmp	r3, r2
 800056e:	ddf8      	ble.n	8000562 <main+0x3a>
    for (int i = 0; i < 3; ++i) {
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3301      	adds	r3, #1
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2b02      	cmp	r3, #2
 800057a:	dddf      	ble.n	800053c <main+0x14>
    }

    // User-inputs
    set_timer(500);						  	  // Set timer with 500ms interval
 800057c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000580:	f7ff ff76 	bl	8000470 <set_timer>
    set_led_state(0b00000001);                // Initial LED state
 8000584:	2001      	movs	r0, #1
 8000586:	f7ff fef5 	bl	8000374 <set_led_state>
    set_button_callback(chase_led_callback);  // Register button behavior
 800058a:	4804      	ldr	r0, [pc, #16]	@ (800059c <main+0x74>)
 800058c:	f7ff feac 	bl	80002e8 <set_button_callback>

    enable_button_interrupt();                // Enable EXTI for the user button
 8000590:	f7ff fe80 	bl	8000294 <enable_button_interrupt>

    while (1) {
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <main+0x6c>
 8000598:	0001869f 	.word	0x0001869f
 800059c:	080004f7 	.word	0x080004f7

080005a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a0:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480c      	ldr	r0, [pc, #48]	@ (80005dc <LoopForever+0x6>)
  ldr r1, =_edata
 80005aa:	490d      	ldr	r1, [pc, #52]	@ (80005e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ac:	4a0d      	ldr	r2, [pc, #52]	@ (80005e4 <LoopForever+0xe>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c0:	4c0a      	ldr	r4, [pc, #40]	@ (80005ec <LoopForever+0x16>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ce:	f000 f811 	bl	80005f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff ffa9 	bl	8000528 <main>

080005d6 <LoopForever>:

LoopForever:
  b LoopForever
 80005d6:	e7fe      	b.n	80005d6 <LoopForever>
  ldr   r0, =_estack
 80005d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005e4:	0800065c 	.word	0x0800065c
  ldr r2, =_sbss
 80005e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005ec:	20000024 	.word	0x20000024

080005f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC1_2_IRQHandler>
	...

080005f4 <__libc_init_array>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	4d0d      	ldr	r5, [pc, #52]	@ (800062c <__libc_init_array+0x38>)
 80005f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000630 <__libc_init_array+0x3c>)
 80005fa:	1b64      	subs	r4, r4, r5
 80005fc:	10a4      	asrs	r4, r4, #2
 80005fe:	2600      	movs	r6, #0
 8000600:	42a6      	cmp	r6, r4
 8000602:	d109      	bne.n	8000618 <__libc_init_array+0x24>
 8000604:	4d0b      	ldr	r5, [pc, #44]	@ (8000634 <__libc_init_array+0x40>)
 8000606:	4c0c      	ldr	r4, [pc, #48]	@ (8000638 <__libc_init_array+0x44>)
 8000608:	f000 f818 	bl	800063c <_init>
 800060c:	1b64      	subs	r4, r4, r5
 800060e:	10a4      	asrs	r4, r4, #2
 8000610:	2600      	movs	r6, #0
 8000612:	42a6      	cmp	r6, r4
 8000614:	d105      	bne.n	8000622 <__libc_init_array+0x2e>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f855 3b04 	ldr.w	r3, [r5], #4
 800061c:	4798      	blx	r3
 800061e:	3601      	adds	r6, #1
 8000620:	e7ee      	b.n	8000600 <__libc_init_array+0xc>
 8000622:	f855 3b04 	ldr.w	r3, [r5], #4
 8000626:	4798      	blx	r3
 8000628:	3601      	adds	r6, #1
 800062a:	e7f2      	b.n	8000612 <__libc_init_array+0x1e>
 800062c:	08000654 	.word	0x08000654
 8000630:	08000654 	.word	0x08000654
 8000634:	08000654 	.word	0x08000654
 8000638:	08000658 	.word	0x08000658

0800063c <_init>:
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063e:	bf00      	nop
 8000640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000642:	bc08      	pop	{r3}
 8000644:	469e      	mov	lr, r3
 8000646:	4770      	bx	lr

08000648 <_fini>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr
