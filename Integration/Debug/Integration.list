
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000678  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800080c  0800080c  0000180c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000944  08000944  00002078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000944  08000944  00001944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800094c  0800094c  00002078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800094c  0800094c  0000194c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000950  08000950  00001950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08000954  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002078  2**0
                  CONTENTS
 10 .bss          000001c0  20000078  20000078  00002078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000238  20000238  00002078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001489  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000653  00000000  00000000  00003531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d3  00000000  00000000  00003cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015e8b  00000000  00000000  00003d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001756  00000000  00000000  00019c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000766b8  00000000  00000000  0001b36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00091a24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000063c  00000000  00000000  00091a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000920a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000078 	.word	0x20000078
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007f4 	.word	0x080007f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	080007f4 	.word	0x080007f4

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <set_led_state>:
uint8_t get_led_state() {
    return led_state;
}

// Set the LED state with encapsulation
void set_led_state(uint8_t state) {
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
    led_state = state;
 80001f2:	4a07      	ldr	r2, [pc, #28]	@ (8000210 <set_led_state+0x28>)
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	7013      	strb	r3, [r2, #0]
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1; // updates led_state and writes it to GPIOE output register (specifically bits 8–15, hence the offset).
 80001f8:	4b06      	ldr	r3, [pc, #24]	@ (8000214 <set_led_state+0x2c>)
 80001fa:	60fb      	str	r3, [r7, #12]
    // To control LEDs, need to write to bits 8-15 of ODR (output data register)
    // Note that it is only uint8_t here (compared to uint16_t above) because each LED (PE8-15) uses only 1 bit in the ODR register compared to 2 in the MODER register.
    *led_register = state;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	79fa      	ldrb	r2, [r7, #7]
 8000200:	701a      	strb	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000094 	.word	0x20000094
 8000214:	48001015 	.word	0x48001015

08000218 <initialise_digital_io>:

void initialise_digital_io() {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
    // Configure PE8–PE15 as outputs (LEDs)
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800021e:	4b0a      	ldr	r3, [pc, #40]	@ (8000248 <initialise_digital_io+0x30>)
 8000220:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000228:	801a      	strh	r2, [r3, #0]

    // Configure PA0 (button) as input
    GPIOA->MODER &= ~(0x3 << (0 * 2));
 800022a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000234:	f023 0303 	bic.w	r3, r3, #3
 8000238:	6013      	str	r3, [r2, #0]
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	48001002 	.word	0x48001002

0800024c <finished_transmission>:
uint8_t term_check = 0;



// This function will be called after a transmission is complete [callback function]
void finished_transmission(uint8_t *rx_string, uint32_t bytes_sent) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
	rx_string[bytes_sent] = '\0'; 		//end of string becomes terminating character so it transmits correctly
 8000256:	687a      	ldr	r2, [r7, #4]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	4413      	add	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
	SerialOutputString(rx_string, &USART1_PORT);
 8000260:	4903      	ldr	r1, [pc, #12]	@ (8000270 <finished_transmission+0x24>)
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f000 f8e7 	bl	8000436 <SerialOutputString>
}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000000 	.word	0x20000000

08000274 <USART1_EXTI25_IRQHandler>:
void (*when_receiving_data)(uint8_t [][32], SerialPort *) = 0x00;
//void (*when_receiving_data)(uint8_t *, SerialPort *) = 0x00;
void (*when_sending_data)() = 0x00;

void USART1_EXTI25_IRQHandler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
			uint8_t discard = when_receiving_data(excess_buffer, &USART1_PORT);
		}
		 */

	// run the USART transmit handler (make sure it is not null first !)
	if (when_sending_data != 0x00) {
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <USART1_EXTI25_IRQHandler+0x20>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d006      	beq.n	800028e <USART1_EXTI25_IRQHandler+0x1a>
		when_sending_data(buffer[0], &USART1_PORT); //try getting rid of these arguments, don't need them
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <USART1_EXTI25_IRQHandler+0x20>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a04      	ldr	r2, [pc, #16]	@ (8000298 <USART1_EXTI25_IRQHandler+0x24>)
 8000286:	7812      	ldrb	r2, [r2, #0]
 8000288:	4904      	ldr	r1, [pc, #16]	@ (800029c <USART1_EXTI25_IRQHandler+0x28>)
 800028a:	4610      	mov	r0, r2
 800028c:	4798      	blx	r3
	}
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	200000fc 	.word	0x200000fc
 8000298:	20000098 	.word	0x20000098
 800029c:	20000000 	.word	0x20000000

080002a0 <main>:
}



int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission); //set callback function
 80002a6:	4a08      	ldr	r2, [pc, #32]	@ (80002c8 <main+0x28>)
 80002a8:	4908      	ldr	r1, [pc, #32]	@ (80002cc <main+0x2c>)
 80002aa:	2004      	movs	r0, #4
 80002ac:	f000 f812 	bl	80002d4 <SerialInitialise>
	/*while(1){
		InputLogic(double_buffer);
	}*/

	//integration
	uint8_t terminating = '#';
 80002b0:	2323      	movs	r3, #35	@ 0x23
 80002b2:	71fb      	strb	r3, [r7, #7]
	initialise_digital_io();
 80002b4:	f7ff ffb0 	bl	8000218 <initialise_digital_io>
	SerialInputString(buffer, &USART1_PORT, terminating);
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	461a      	mov	r2, r3
 80002bc:	4903      	ldr	r1, [pc, #12]	@ (80002cc <main+0x2c>)
 80002be:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <main+0x30>)
 80002c0:	f000 f8d1 	bl	8000466 <SerialInputString>




	/* Loop forever */
		for(;;) {}
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <main+0x24>
 80002c8:	0800024d 	.word	0x0800024d
 80002cc:	20000000 	.word	0x20000000
 80002d0:	20000098 	.word	0x20000098

080002d4 <SerialInitialise>:
//uint8_t userBufferReady = 0;
uint8_t still_reading = 0;

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint8_t *, uint32_t)) {
 80002d4:	b480      	push	{r7}
 80002d6:	b087      	sub	sp, #28
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;		//set callback function
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002e6:	4b39      	ldr	r3, [pc, #228]	@ (80003cc <SerialInitialise+0xf8>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	4a38      	ldr	r2, [pc, #224]	@ (80003cc <SerialInitialise+0xf8>)
 80002ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002f0:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002f2:	4b36      	ldr	r3, [pc, #216]	@ (80003cc <SerialInitialise+0xf8>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a35      	ldr	r2, [pc, #212]	@ (80003cc <SerialInitialise+0xf8>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	691a      	ldr	r2, [r3, #16]
 8000302:	4b32      	ldr	r3, [pc, #200]	@ (80003cc <SerialInitialise+0xf8>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4931      	ldr	r1, [pc, #196]	@ (80003cc <SerialInitialise+0xf8>)
 8000308:	4313      	orrs	r3, r2
 800030a:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	68ba      	ldr	r2, [r7, #8]
 8000312:	6952      	ldr	r2, [r2, #20]
 8000314:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	68ba      	ldr	r2, [r7, #8]
 800031c:	6992      	ldr	r2, [r2, #24]
 800031e:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	69d9      	ldr	r1, [r3, #28]
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	6a1a      	ldr	r2, [r3, #32]
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	430a      	orrs	r2, r1
 8000330:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	6a19      	ldr	r1, [r3, #32]
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	430a      	orrs	r2, r1
 8000342:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	68da      	ldr	r2, [r3, #12]
 8000348:	4b20      	ldr	r3, [pc, #128]	@ (80003cc <SerialInitialise+0xf8>)
 800034a:	69db      	ldr	r3, [r3, #28]
 800034c:	491f      	ldr	r1, [pc, #124]	@ (80003cc <SerialInitialise+0xf8>)
 800034e:	4313      	orrs	r3, r2
 8000350:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	4b1d      	ldr	r3, [pc, #116]	@ (80003cc <SerialInitialise+0xf8>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	491c      	ldr	r1, [pc, #112]	@ (80003cc <SerialInitialise+0xf8>)
 800035c:	4313      	orrs	r3, r2
 800035e:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	330c      	adds	r3, #12
 8000366:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2b04      	cmp	r3, #4
 800036c:	d820      	bhi.n	80003b0 <SerialInitialise+0xdc>
 800036e:	a201      	add	r2, pc, #4	@ (adr r2, 8000374 <SerialInitialise+0xa0>)
 8000370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000374:	08000389 	.word	0x08000389
 8000378:	08000391 	.word	0x08000391
 800037c:	08000399 	.word	0x08000399
 8000380:	080003a1 	.word	0x080003a1
 8000384:	080003a9 	.word	0x080003a9
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	2246      	movs	r2, #70	@ 0x46
 800038c:	801a      	strh	r2, [r3, #0]
		break;
 800038e:	e00f      	b.n	80003b0 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	2246      	movs	r2, #70	@ 0x46
 8000394:	801a      	strh	r2, [r3, #0]
		break;
 8000396:	e00b      	b.n	80003b0 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	2246      	movs	r2, #70	@ 0x46
 800039c:	801a      	strh	r2, [r3, #0]
		break;
 800039e:	e007      	b.n	80003b0 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	2246      	movs	r2, #70	@ 0x46
 80003a4:	801a      	strh	r2, [r3, #0]
		break;
 80003a6:	e003      	b.n	80003b0 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	2246      	movs	r2, #70	@ 0x46
 80003ac:	801a      	strh	r2, [r3, #0]
		break;
 80003ae:	bf00      	nop
	}

	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f042 020d 	orr.w	r2, r2, #13
 80003be:	601a      	str	r2, [r3, #0]
}
 80003c0:	bf00      	nop
 80003c2:	371c      	adds	r7, #28
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000

080003d0 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){		//check ready to transmit flag
 80003dc:	bf00      	nop
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	69db      	ldr	r3, [r3, #28]
 80003e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0f8      	beq.n	80003de <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;								//load data into transmit data register
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	b292      	uxth	r2, r2
 80003f4:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <SerialInputChar>:

void SerialInputChar(uint8_t *data, SerialPort *serial_port) {
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
 800040a:	6039      	str	r1, [r7, #0]

	// check ready to receive flag
    while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0) {
 800040c:	bf00      	nop
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	f003 0320 	and.w	r3, r3, #32
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0f8      	beq.n	800040e <SerialInputChar+0xc>
    }

    // Read received character
    *data = (uint8_t)(serial_port->UART->RDR); 					// Reading RDR clears RXNE
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000422:	b29b      	uxth	r3, r3
 8000424:	b2da      	uxtb	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	701a      	strb	r2, [r3, #0]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <SerialOutputString>:
	serial_port->UART->ICR |= USART_ICR_FECF | USART_ICR_ORECF;
}
*/


void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	6039      	str	r1, [r7, #0]

	//continues to transmit while there are still characters to send
	while(*pt) {
 8000440:	e008      	b.n	8000454 <SerialOutputString+0x1e>
		SerialOutputChar(*pt, serial_port);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	6839      	ldr	r1, [r7, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ffc1 	bl	80003d0 <SerialOutputChar>
		pt++;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3301      	adds	r3, #1
 8000452:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f2      	bne.n	8000442 <SerialOutputString+0xc>
	}

}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <SerialInputString>:

void SerialInputString(uint8_t *pt, SerialPort *serial_port, uint8_t terminating) {
 8000466:	b580      	push	{r7, lr}
 8000468:	b086      	sub	sp, #24
 800046a:	af00      	add	r7, sp, #0
 800046c:	60f8      	str	r0, [r7, #12]
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	4613      	mov	r3, r2
 8000472:	71fb      	strb	r3, [r7, #7]
	uint32_t counter = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
	uint8_t *start_of_string = pt;								/*initialise pointer to start of string
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	613b      	str	r3, [r7, #16]
																to pass to callback function*/
	//uint8_t buffer_size = sizeof(pt) / sizeof(pt[0]); //this may not work because of pointer

	// Read first character
	SerialInputChar(pt, serial_port);
 800047c:	68b9      	ldr	r1, [r7, #8]
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	f7ff ffbf 	bl	8000402 <SerialInputChar>
	counter++;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	3301      	adds	r3, #1
 8000488:	617b      	str	r3, [r7, #20]

	// Keep reading until terminating character is received
	while (*pt != terminating) {
 800048a:	e009      	b.n	80004a0 <SerialInputString+0x3a>
		pt++;  													// Move pointer
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	3301      	adds	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
		SerialInputChar(pt, serial_port);
 8000492:	68b9      	ldr	r1, [r7, #8]
 8000494:	68f8      	ldr	r0, [r7, #12]
 8000496:	f7ff ffb4 	bl	8000402 <SerialInputChar>
		counter++;
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	3301      	adds	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
	while (*pt != terminating) {
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	79fa      	ldrb	r2, [r7, #7]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d1f0      	bne.n	800048c <SerialInputString+0x26>
		 }
		 */
	}

	//serial_port->completion_function(start_of_string, counter); //callback function
	ParseInput(start_of_string, counter);
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	6938      	ldr	r0, [r7, #16]
 80004b2:	f000 f805 	bl	80004c0 <ParseInput>
}
 80004b6:	bf00      	nop
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <ParseInput>:

	// Need to reset the counter for the ISR
	bufferCounter[uartKernel] = 0;
}

void ParseInput(uint8_t *input, uint8_t length) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b0a0      	sub	sp, #128	@ 0x80
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	70fb      	strb	r3, [r7, #3]
    char *input_str = (char *)input;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Find the first space between command and operand
    char *space = strchr(input_str, ' ');
 80004d0:	2120      	movs	r1, #32
 80004d2:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80004d4:	f000 f932 	bl	800073c <strchr>
 80004d8:	6778      	str	r0, [r7, #116]	@ 0x74
    if (!space) {
 80004da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d104      	bne.n	80004ea <ParseInput+0x2a>
        SerialOutputString("Invalid command format\r\n", &USART1_PORT);
 80004e0:	4936      	ldr	r1, [pc, #216]	@ (80005bc <ParseInput+0xfc>)
 80004e2:	4837      	ldr	r0, [pc, #220]	@ (80005c0 <ParseInput+0x100>)
 80004e4:	f7ff ffa7 	bl	8000436 <SerialOutputString>
 80004e8:	e065      	b.n	80005b6 <ParseInput+0xf6>
        return;
    }

    // Extract command
    size_t command_len = space - input_str;
 80004ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80004ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (command_len >= 20) command_len = 19;
 80004f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80004f4:	2b13      	cmp	r3, #19
 80004f6:	d901      	bls.n	80004fc <ParseInput+0x3c>
 80004f8:	2313      	movs	r3, #19
 80004fa:	67fb      	str	r3, [r7, #124]	@ 0x7c

    char command[20] = {0};
 80004fc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
    strncpy(command, input_str, command_len);
 800050c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000510:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000512:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000514:	4618      	mov	r0, r3
 8000516:	f000 f91e 	bl	8000756 <strncpy>
    command[command_len] = '\0';
 800051a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800051e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000520:	4413      	add	r3, r2
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]

    // Extract operand
    char operand[80] = {0};
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	2250      	movs	r2, #80	@ 0x50
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f8fc 	bl	800072c <memset>
    strncpy(operand, space + 1, sizeof(operand) - 1);
 8000534:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000536:	1c59      	adds	r1, r3, #1
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	224f      	movs	r2, #79	@ 0x4f
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f909 	bl	8000756 <strncpy>

    // End string at new line
    char *newline = strpbrk(operand, "\r\n");
 8000544:	f107 0308 	add.w	r3, r7, #8
 8000548:	491e      	ldr	r1, [pc, #120]	@ (80005c4 <ParseInput+0x104>)
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f916 	bl	800077c <strpbrk>
 8000550:	6738      	str	r0, [r7, #112]	@ 0x70
    if (newline) *newline = '\0';
 8000552:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <ParseInput+0x9e>
 8000558:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]


    if (strcmp(command, "led") == 0) {
 800055e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000562:	4919      	ldr	r1, [pc, #100]	@ (80005c8 <ParseInput+0x108>)
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe35 	bl	80001d4 <strcmp>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d10f      	bne.n	8000590 <ParseInput+0xd0>
        // Convert binary string to byte and output to GPIO (stub here)
        uint8_t led_state = (uint8_t)strtol(operand, NULL, 2);
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	2202      	movs	r2, #2
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f8cd 	bl	8000718 <strtol>
 800057e:	4603      	mov	r3, r0
 8000580:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        // Example: send pattern to LEDs (replace with your actual LED function)
        set_led_state(led_state); //LED DISPLAY FUNCTION
 8000584:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe2d 	bl	80001e8 <set_led_state>
 800058e:	e012      	b.n	80005b6 <ParseInput+0xf6>

    } else if (strcmp(command, "serial") == 0) {
 8000590:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000594:	490d      	ldr	r1, [pc, #52]	@ (80005cc <ParseInput+0x10c>)
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe1c 	bl	80001d4 <strcmp>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d109      	bne.n	80005b6 <ParseInput+0xf6>
        // Echo the operand back through serial
        SerialOutputString(operand, &USART1_PORT);
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4905      	ldr	r1, [pc, #20]	@ (80005bc <ParseInput+0xfc>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff44 	bl	8000436 <SerialOutputString>
        SerialOutputString("\r\n", &USART1_PORT);
 80005ae:	4903      	ldr	r1, [pc, #12]	@ (80005bc <ParseInput+0xfc>)
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <ParseInput+0x104>)
 80005b2:	f7ff ff40 	bl	8000436 <SerialOutputString>
        StartContinuousTimer(period); // Replace with timer input

    } else {
        SerialOutputString("Unknown command\r\n", &USART1_PORT);
    }*/
}
 80005b6:	3780      	adds	r7, #128	@ 0x80
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000000 	.word	0x20000000
 80005c0:	08000818 	.word	0x08000818
 80005c4:	08000834 	.word	0x08000834
 80005c8:	08000838 	.word	0x08000838
 80005cc:	0800083c 	.word	0x0800083c

080005d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	@ (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	@ (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fe:	f000 f8d5 	bl	80007ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fe4d 	bl	80002a0 <main>

08000606 <LoopForever>:

LoopForever:
  b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000614:	08000954 	.word	0x08000954
  ldr r2, =_sbss
 8000618:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800061c:	20000238 	.word	0x20000238

08000620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_2_IRQHandler>
	...

08000624 <_strtol_l.isra.0>:
 8000624:	2b24      	cmp	r3, #36	@ 0x24
 8000626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062a:	4686      	mov	lr, r0
 800062c:	4690      	mov	r8, r2
 800062e:	d801      	bhi.n	8000634 <_strtol_l.isra.0+0x10>
 8000630:	2b01      	cmp	r3, #1
 8000632:	d106      	bne.n	8000642 <_strtol_l.isra.0+0x1e>
 8000634:	f000 f8b4 	bl	80007a0 <__errno>
 8000638:	2316      	movs	r3, #22
 800063a:	6003      	str	r3, [r0, #0]
 800063c:	2000      	movs	r0, #0
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	4834      	ldr	r0, [pc, #208]	@ (8000714 <_strtol_l.isra.0+0xf0>)
 8000644:	460d      	mov	r5, r1
 8000646:	462a      	mov	r2, r5
 8000648:	f815 4b01 	ldrb.w	r4, [r5], #1
 800064c:	5d06      	ldrb	r6, [r0, r4]
 800064e:	f016 0608 	ands.w	r6, r6, #8
 8000652:	d1f8      	bne.n	8000646 <_strtol_l.isra.0+0x22>
 8000654:	2c2d      	cmp	r4, #45	@ 0x2d
 8000656:	d110      	bne.n	800067a <_strtol_l.isra.0+0x56>
 8000658:	782c      	ldrb	r4, [r5, #0]
 800065a:	2601      	movs	r6, #1
 800065c:	1c95      	adds	r5, r2, #2
 800065e:	f033 0210 	bics.w	r2, r3, #16
 8000662:	d115      	bne.n	8000690 <_strtol_l.isra.0+0x6c>
 8000664:	2c30      	cmp	r4, #48	@ 0x30
 8000666:	d10d      	bne.n	8000684 <_strtol_l.isra.0+0x60>
 8000668:	782a      	ldrb	r2, [r5, #0]
 800066a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800066e:	2a58      	cmp	r2, #88	@ 0x58
 8000670:	d108      	bne.n	8000684 <_strtol_l.isra.0+0x60>
 8000672:	786c      	ldrb	r4, [r5, #1]
 8000674:	3502      	adds	r5, #2
 8000676:	2310      	movs	r3, #16
 8000678:	e00a      	b.n	8000690 <_strtol_l.isra.0+0x6c>
 800067a:	2c2b      	cmp	r4, #43	@ 0x2b
 800067c:	bf04      	itt	eq
 800067e:	782c      	ldrbeq	r4, [r5, #0]
 8000680:	1c95      	addeq	r5, r2, #2
 8000682:	e7ec      	b.n	800065e <_strtol_l.isra.0+0x3a>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f6      	bne.n	8000676 <_strtol_l.isra.0+0x52>
 8000688:	2c30      	cmp	r4, #48	@ 0x30
 800068a:	bf14      	ite	ne
 800068c:	230a      	movne	r3, #10
 800068e:	2308      	moveq	r3, #8
 8000690:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000694:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8000698:	2200      	movs	r2, #0
 800069a:	fbbc f9f3 	udiv	r9, ip, r3
 800069e:	4610      	mov	r0, r2
 80006a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80006a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80006a8:	2f09      	cmp	r7, #9
 80006aa:	d80f      	bhi.n	80006cc <_strtol_l.isra.0+0xa8>
 80006ac:	463c      	mov	r4, r7
 80006ae:	42a3      	cmp	r3, r4
 80006b0:	dd1b      	ble.n	80006ea <_strtol_l.isra.0+0xc6>
 80006b2:	1c57      	adds	r7, r2, #1
 80006b4:	d007      	beq.n	80006c6 <_strtol_l.isra.0+0xa2>
 80006b6:	4581      	cmp	r9, r0
 80006b8:	d314      	bcc.n	80006e4 <_strtol_l.isra.0+0xc0>
 80006ba:	d101      	bne.n	80006c0 <_strtol_l.isra.0+0x9c>
 80006bc:	45a2      	cmp	sl, r4
 80006be:	db11      	blt.n	80006e4 <_strtol_l.isra.0+0xc0>
 80006c0:	fb00 4003 	mla	r0, r0, r3, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80006ca:	e7eb      	b.n	80006a4 <_strtol_l.isra.0+0x80>
 80006cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80006d0:	2f19      	cmp	r7, #25
 80006d2:	d801      	bhi.n	80006d8 <_strtol_l.isra.0+0xb4>
 80006d4:	3c37      	subs	r4, #55	@ 0x37
 80006d6:	e7ea      	b.n	80006ae <_strtol_l.isra.0+0x8a>
 80006d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80006dc:	2f19      	cmp	r7, #25
 80006de:	d804      	bhi.n	80006ea <_strtol_l.isra.0+0xc6>
 80006e0:	3c57      	subs	r4, #87	@ 0x57
 80006e2:	e7e4      	b.n	80006ae <_strtol_l.isra.0+0x8a>
 80006e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006e8:	e7ed      	b.n	80006c6 <_strtol_l.isra.0+0xa2>
 80006ea:	1c53      	adds	r3, r2, #1
 80006ec:	d108      	bne.n	8000700 <_strtol_l.isra.0+0xdc>
 80006ee:	2322      	movs	r3, #34	@ 0x22
 80006f0:	f8ce 3000 	str.w	r3, [lr]
 80006f4:	4660      	mov	r0, ip
 80006f6:	f1b8 0f00 	cmp.w	r8, #0
 80006fa:	d0a0      	beq.n	800063e <_strtol_l.isra.0+0x1a>
 80006fc:	1e69      	subs	r1, r5, #1
 80006fe:	e006      	b.n	800070e <_strtol_l.isra.0+0xea>
 8000700:	b106      	cbz	r6, 8000704 <_strtol_l.isra.0+0xe0>
 8000702:	4240      	negs	r0, r0
 8000704:	f1b8 0f00 	cmp.w	r8, #0
 8000708:	d099      	beq.n	800063e <_strtol_l.isra.0+0x1a>
 800070a:	2a00      	cmp	r2, #0
 800070c:	d1f6      	bne.n	80006fc <_strtol_l.isra.0+0xd8>
 800070e:	f8c8 1000 	str.w	r1, [r8]
 8000712:	e794      	b.n	800063e <_strtol_l.isra.0+0x1a>
 8000714:	08000844 	.word	0x08000844

08000718 <strtol>:
 8000718:	4613      	mov	r3, r2
 800071a:	460a      	mov	r2, r1
 800071c:	4601      	mov	r1, r0
 800071e:	4802      	ldr	r0, [pc, #8]	@ (8000728 <strtol+0x10>)
 8000720:	6800      	ldr	r0, [r0, #0]
 8000722:	f7ff bf7f 	b.w	8000624 <_strtol_l.isra.0>
 8000726:	bf00      	nop
 8000728:	20000028 	.word	0x20000028

0800072c <memset>:
 800072c:	4402      	add	r2, r0
 800072e:	4603      	mov	r3, r0
 8000730:	4293      	cmp	r3, r2
 8000732:	d100      	bne.n	8000736 <memset+0xa>
 8000734:	4770      	bx	lr
 8000736:	f803 1b01 	strb.w	r1, [r3], #1
 800073a:	e7f9      	b.n	8000730 <memset+0x4>

0800073c <strchr>:
 800073c:	b2c9      	uxtb	r1, r1
 800073e:	4603      	mov	r3, r0
 8000740:	4618      	mov	r0, r3
 8000742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000746:	b112      	cbz	r2, 800074e <strchr+0x12>
 8000748:	428a      	cmp	r2, r1
 800074a:	d1f9      	bne.n	8000740 <strchr+0x4>
 800074c:	4770      	bx	lr
 800074e:	2900      	cmp	r1, #0
 8000750:	bf18      	it	ne
 8000752:	2000      	movne	r0, #0
 8000754:	4770      	bx	lr

08000756 <strncpy>:
 8000756:	b510      	push	{r4, lr}
 8000758:	3901      	subs	r1, #1
 800075a:	4603      	mov	r3, r0
 800075c:	b132      	cbz	r2, 800076c <strncpy+0x16>
 800075e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000762:	f803 4b01 	strb.w	r4, [r3], #1
 8000766:	3a01      	subs	r2, #1
 8000768:	2c00      	cmp	r4, #0
 800076a:	d1f7      	bne.n	800075c <strncpy+0x6>
 800076c:	441a      	add	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	4293      	cmp	r3, r2
 8000772:	d100      	bne.n	8000776 <strncpy+0x20>
 8000774:	bd10      	pop	{r4, pc}
 8000776:	f803 1b01 	strb.w	r1, [r3], #1
 800077a:	e7f9      	b.n	8000770 <strncpy+0x1a>

0800077c <strpbrk>:
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	4603      	mov	r3, r0
 8000780:	4618      	mov	r0, r3
 8000782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000786:	b142      	cbz	r2, 800079a <strpbrk+0x1e>
 8000788:	1e4c      	subs	r4, r1, #1
 800078a:	e001      	b.n	8000790 <strpbrk+0x14>
 800078c:	4295      	cmp	r5, r2
 800078e:	d005      	beq.n	800079c <strpbrk+0x20>
 8000790:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8000794:	2d00      	cmp	r5, #0
 8000796:	d1f9      	bne.n	800078c <strpbrk+0x10>
 8000798:	e7f2      	b.n	8000780 <strpbrk+0x4>
 800079a:	4610      	mov	r0, r2
 800079c:	bd30      	pop	{r4, r5, pc}
	...

080007a0 <__errno>:
 80007a0:	4b01      	ldr	r3, [pc, #4]	@ (80007a8 <__errno+0x8>)
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000028 	.word	0x20000028

080007ac <__libc_init_array>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	4d0d      	ldr	r5, [pc, #52]	@ (80007e4 <__libc_init_array+0x38>)
 80007b0:	4c0d      	ldr	r4, [pc, #52]	@ (80007e8 <__libc_init_array+0x3c>)
 80007b2:	1b64      	subs	r4, r4, r5
 80007b4:	10a4      	asrs	r4, r4, #2
 80007b6:	2600      	movs	r6, #0
 80007b8:	42a6      	cmp	r6, r4
 80007ba:	d109      	bne.n	80007d0 <__libc_init_array+0x24>
 80007bc:	4d0b      	ldr	r5, [pc, #44]	@ (80007ec <__libc_init_array+0x40>)
 80007be:	4c0c      	ldr	r4, [pc, #48]	@ (80007f0 <__libc_init_array+0x44>)
 80007c0:	f000 f818 	bl	80007f4 <_init>
 80007c4:	1b64      	subs	r4, r4, r5
 80007c6:	10a4      	asrs	r4, r4, #2
 80007c8:	2600      	movs	r6, #0
 80007ca:	42a6      	cmp	r6, r4
 80007cc:	d105      	bne.n	80007da <__libc_init_array+0x2e>
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d4:	4798      	blx	r3
 80007d6:	3601      	adds	r6, #1
 80007d8:	e7ee      	b.n	80007b8 <__libc_init_array+0xc>
 80007da:	f855 3b04 	ldr.w	r3, [r5], #4
 80007de:	4798      	blx	r3
 80007e0:	3601      	adds	r6, #1
 80007e2:	e7f2      	b.n	80007ca <__libc_init_array+0x1e>
 80007e4:	0800094c 	.word	0x0800094c
 80007e8:	0800094c 	.word	0x0800094c
 80007ec:	0800094c 	.word	0x0800094c
 80007f0:	08000950 	.word	0x08000950

080007f4 <_init>:
 80007f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f6:	bf00      	nop
 80007f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fa:	bc08      	pop	{r3}
 80007fc:	469e      	mov	lr, r3
 80007fe:	4770      	bx	lr

08000800 <_fini>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	bf00      	nop
 8000804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000806:	bc08      	pop	{r3}
 8000808:	469e      	mov	lr, r3
 800080a:	4770      	bx	lr
