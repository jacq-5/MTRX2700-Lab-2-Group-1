#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "serial.h"
#include "stm32f303xc.h"
#include "led_display.c"


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void finished_transmission(uint32_t bytes_sent) {
	// This function will be called after a transmission is complete

	volatile uint32_t test = 0;
	// make a very simple delay
	for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
		// waste time !
	}
}


int main(void)
{


	//LED MAIN FUNCTION
		// Simulate receiving "10001010" from serial
		// === Init GPIO and LEDs ===
	enable_clocks();
	initialise_digital_io();

		// Optional: clear LEDs initially
	set_led_state(0x00);

	    // === Simulate received binary pattern ===
	const char *received_led_value = "10001010";
	uint8_t led_value = binary_string_to_uint8(received_led_value);

}


void ParseInput(uint8_t *input) {
    char *input_str = (char *)input;

    // Find the first space between command and operand
    char *space = strchr(input_str, ' ');
    if (!space) {
        SerialOutputString("Invalid command format\r\n", &USART1_PORT);
        return;
    }

    // Extract command
    size_t command_len = space - input_str;
    if (command_len >= 20) command_len = 19;

    char command[20] = {0};
    strncpy(command, input_str, command_len);
    command[command_len] = '\0';

    // Extract operand
    char operand[80] = {0};
    strncpy(operand, space + 1, sizeof(operand) - 1);

    // End string at new line
    char *newline = strpbrk(operand, "\r\n");
    if (newline) *newline = '\0';

    // Try to parse command and operand from the string
    int parsed = sscanf((char *)input, "%19s %79[^\r\n]", command, operand);

    if (parsed < 2) {
        SerialOutputString("Invalid command format\r\n", &USART1_PORT);
        return;
    }

    if (strcmp(command, "led") == 0) {
        // Convert binary string to byte and output to GPIO (stub here)
        uint8_t led_value = (uint8_t)strtol(operand, NULL, 2);
        // Example: send pattern to LEDs (replace with your actual LED function)
        set_led_state(led_value); //LED DISPLAY FUNCTION

    } else if (strcmp(command, "serial") == 0) {
        // Echo the operand back through serial
        SerialOutputString(operand, &USART1_PORT);
        SerialOutputString("\r\n", &USART1_PORT);

    } else if (strcmp(command, "oneshot") == 0) {
        uint32_t duration = (uint32_t)strtoul(operand, NULL, 10);
        StartOneShotTimer(duration); // Replace with timer input

    } else if (strcmp(command, "timer") == 0) {
        uint32_t period = (uint32_t)strtoul(operand, NULL, 10);
        StartContinuousTimer(period); // Replace with timer input

    } else {
        SerialOutputString("Unknown command\r\n", &USART1_PORT);
    }
}
