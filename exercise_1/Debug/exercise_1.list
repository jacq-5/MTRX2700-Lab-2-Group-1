
exercise_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000418  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005ac  080005b4  000015b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005ac  080005ac  000015b4  2**0
                  CONTENTS
  4 .ARM          00000000  080005ac  080005ac  000015b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005ac  080005b4  000015b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ac  080005ac  000015ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005b0  080005b0  000015b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000015b4  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e67  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d4  00000000  00000000  0000244b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00002820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000009f  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014ef6  00000000  00000000  000029a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cfa  00000000  00000000  0001789d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072ac4  00000000  00000000  00018597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008b05b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002a4  00000000  00000000  0008b0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000098  00000000  00000000  0008b344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000594 	.word	0x08000594

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000594 	.word	0x08000594

080001d4 <initialise_leds>:

#include "stm32f303xc.h"

static uint8_t led_state = 0;  // Only accessible inside this file

void initialise_leds(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80001da:	4b09      	ldr	r3, [pc, #36]	@ (8000200 <initialise_leds+0x2c>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a08      	ldr	r2, [pc, #32]	@ (8000200 <initialise_leds+0x2c>)
 80001e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001e4:	6153      	str	r3, [r2, #20]
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001e6:	4b07      	ldr	r3, [pc, #28]	@ (8000204 <initialise_leds+0x30>)
 80001e8:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f245 5255 	movw	r2, #21845	@ 0x5555
 80001f0:	801a      	strh	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40021000 	.word	0x40021000
 8000204:	48001002 	.word	0x48001002

08000208 <set_led_state>:

void set_led_state(uint8_t state) {
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
    led_state = state;
 8000212:	4a07      	ldr	r2, [pc, #28]	@ (8000230 <set_led_state+0x28>)
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	7013      	strb	r3, [r2, #0]
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000218:	4b06      	ldr	r3, [pc, #24]	@ (8000234 <set_led_state+0x2c>)
 800021a:	60fb      	str	r3, [r7, #12]
    *led_register = state;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	79fa      	ldrb	r2, [r7, #7]
 8000220:	701a      	strb	r2, [r3, #0]
}
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	2000001c 	.word	0x2000001c
 8000234:	48001015 	.word	0x48001015

08000238 <get_led_state>:

uint8_t get_led_state(void) {
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
    return led_state;
 800023c:	4b03      	ldr	r3, [pc, #12]	@ (800024c <get_led_state+0x14>)
 800023e:	781b      	ldrb	r3, [r3, #0]
}
 8000240:	4618      	mov	r0, r3
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	2000001c 	.word	0x2000001c

08000250 <toggle_leds>:

void toggle_leds(void) {
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000256:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <toggle_leds+0x28>)
 8000258:	607b      	str	r3, [r7, #4]
    *led_register ^= led_state;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	4b07      	ldr	r3, [pc, #28]	@ (800027c <toggle_leds+0x2c>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	4053      	eors	r3, r2
 8000264:	b2da      	uxtb	r2, r3
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	701a      	strb	r2, [r3, #0]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	48001015 	.word	0x48001015
 800027c:	2000001c 	.word	0x2000001c

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	@ (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	@ (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <enable_clocks>:
// The variable led_state is declared as static within the .c file, making it private to the file and inaccessible outside of the module. This ensures that the LED state is encapsulated and cannot be directly accessed or modified by other parts of the program.
// points to the button_callback function each time the button is pressed
void (*button_callback)() = NULL;		// function pointer to handle button press events

// Enable the clocks for desired peripherals (GPIOA, GPIOC, and GPIOE)
void enable_clocks() {
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;  // Enable clock for GPIOA (user button)
 8000314:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <enable_clocks+0x28>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a07      	ldr	r2, [pc, #28]	@ (8000338 <enable_clocks+0x28>)
 800031a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800031e:	6153      	str	r3, [r2, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;  // Enable clock for GPIOE (LEDs)
 8000320:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <enable_clocks+0x28>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a04      	ldr	r2, [pc, #16]	@ (8000338 <enable_clocks+0x28>)
 8000326:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800032a:	6153      	str	r3, [r2, #20]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000

0800033c <enable_interrupt>:
	// So, first part with int16 and GPIO3->MODER casts the 32 bit register into 16-bit halfwords (basically just separates it into two parts) so that the first is indexed as 0 (OFF) and second half controlling LEDs is 1. The '+1' points to the second halfword.
	//*led_output_registers = 0x5555; // 0x5555 as binary is 01010101 which sets each pin (pe8-15) to output mode (to light up LEDs)
//}

// From W05-C-Interrupt, sets up interrupt on rising edge of PA0 (user button) so that when button is pressed, interrupt is initiated
void enable_interrupt() {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000340:	b672      	cpsid	i
}
 8000342:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable the system configuration controller (SYSCFG in RCC)
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <enable_interrupt+0x48>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a0e      	ldr	r2, [pc, #56]	@ (8000384 <enable_interrupt+0x48>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6193      	str	r3, [r2, #24]

	// External Interrupts details on large manual page 294)
	// PA0 is on interrupt EXTI0 large manual - page 250
	// EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000350:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <enable_interrupt+0x4c>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 8000356:	4b0d      	ldr	r3, [pc, #52]	@ (800038c <enable_interrupt+0x50>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	4a0c      	ldr	r2, [pc, #48]	@ (800038c <enable_interrupt+0x50>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 8000362:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <enable_interrupt+0x50>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a09      	ldr	r2, [pc, #36]	@ (800038c <enable_interrupt+0x50>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
 800036e:	2101      	movs	r1, #1
 8000370:	2006      	movs	r0, #6
 8000372:	f7ff ffa3 	bl	80002bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000376:	2006      	movs	r0, #6
 8000378:	f7ff ff82 	bl	8000280 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800037c:	b662      	cpsie	i
}
 800037e:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40010000 	.word	0x40010000
 800038c:	40010400 	.word	0x40010400

08000390 <init_timer>:

// Initialize the timer for LED speed control
// TIM2 for blinking
// The TIM2 interrupt is used to toggle the LEDs on a timed schedule, essentially making them "blink" or change pattern automatically in the background, without needing to wait/block in the main loop.
void init_timer() {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;  	// Enable TIM2 clock
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <init_timer+0x50>)
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	4a11      	ldr	r2, [pc, #68]	@ (80003e0 <init_timer+0x50>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	61d3      	str	r3, [r2, #28]
    TIM2->PSC = 4000;  						// Prescaler value (8 MHz / 8000 = 1 kHz)
 80003a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80003a8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000;  						// Auto-reload value for 1 Hz blinking
 80003aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;  			// Enable update interrupt
 80003b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;  				// Start the timer
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ce:	f043 0301 	orr.w	r3, r3, #1
 80003d2:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);  			// Enable TIM2 interrupt in NVIC
 80003d4:	201c      	movs	r0, #28
 80003d6:	f7ff ff53 	bl	8000280 <__NVIC_EnableIRQ>
    // Nested Vectored Interrupt Controller (NVIC) to enable the interrupt line for Timer 2 (TIM2).
    // Once enabled, if TIM2 triggers an interrupt (like a timer overflow), the corresponding interrupt handler (TIM2_IRQHandler()) will be called automatically by the CPU.
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <TIM2_IRQHandler>:

// Actual timer interrupt handler for controlling LED speed
void TIM2_IRQHandler(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {  // Check update interrupt flag, TIM_SR_UIF is the "update interrupt flag" — it tells us the timer overflowed.
 80003e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ec:	691b      	ldr	r3, [r3, #16]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d009      	beq.n	800040a <TIM2_IRQHandler+0x26>
        TIM2->SR &= ~TIM_SR_UIF;  // Manually clear interrupt flag
 80003f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000400:	f023 0301 	bic.w	r3, r3, #1
 8000404:	6113      	str	r3, [r2, #16]
        toggle_leds();			  // Change LED pattern
 8000406:	f7ff ff23 	bl	8000250 <toggle_leds>
    }
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <set_button_callback>:
//}


// Set the button press callback function, Allows registering a function to call when the button is pressed
// The function set_button_callback() allows the user to pass in a function pointer. This pointer is stored in the button_callback variable, so whenever the button is pressed, the corresponding function can be called.
void set_button_callback(void (*callback)()) { // *callback pointer
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
    button_callback = callback;
 8000418:	4a04      	ldr	r2, [pc, #16]	@ (800042c <set_button_callback+0x1c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6013      	str	r3, [r2, #0]
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000020 	.word	0x20000020

08000430 <EXTI0_IRQHandler>:

// Clears interrupt pending flag and runs the registered callback if it exists.
// Interrupt handler for button press (PA0)
// When the button (PA0) triggers an interrupt, the EXTI0_IRQHandler ISR is executed. Inside the ISR, the function pointer button_callback is checked, and if it is not NULL, the callback function is called. This triggers the function you passed during initialization.
void EXTI0_IRQHandler(void) {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR0) {  			// Check if the interrupt is pending for Pa0 (button)
 8000434:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <EXTI0_IRQHandler+0x30>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00c      	beq.n	800045a <EXTI0_IRQHandler+0x2a>
        EXTI->PR |= EXTI_PR_PR0;  			// Clear interrupt flag
 8000440:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <EXTI0_IRQHandler+0x30>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a06      	ldr	r2, [pc, #24]	@ (8000460 <EXTI0_IRQHandler+0x30>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6153      	str	r3, [r2, #20]
        if (button_callback != NULL) {
 800044c:	4b05      	ldr	r3, [pc, #20]	@ (8000464 <EXTI0_IRQHandler+0x34>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d002      	beq.n	800045a <EXTI0_IRQHandler+0x2a>
            button_callback();  			// Call the registered callback function
 8000454:	4b03      	ldr	r3, [pc, #12]	@ (8000464 <EXTI0_IRQHandler+0x34>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4798      	blx	r3
        }
    }
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40010400 	.word	0x40010400
 8000464:	20000020 	.word	0x20000020

08000468 <initialise_button>:
//    RCC->AHBENR |= RCC_AHBENR_GPIOEEN; // Enable GPIOE clock
//    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
//    *led_output_registers = 0x5555; // Set PE8–PE15 as output
//}

void initialise_button(void) {
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable GPIOA clock
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <initialise_button+0x2c>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <initialise_button+0x2c>)
 8000472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000476:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(0x3 << (0 * 2)); // Clear mode bits for PA0 (set as input)
 8000478:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000482:	f023 0303 	bic.w	r3, r3, #3
 8000486:	6013      	str	r3, [r2, #0]
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <chase_led_callback>:
}

// button callback for LED
// Rotates the LED pattern left.
// The MSB wraps around to LSB. Creates a "chasing" LED effect.
void chase_led_callback() {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
    uint8_t state = get_led_state();
 800049e:	f7ff fecb 	bl	8000238 <get_led_state>
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
    state = (state << 1) | ((state & 0x80) >> 7);  // Rotate left by wrapping leftmost bit to rightmost position
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b25a      	sxtb	r2, r3
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	09db      	lsrs	r3, r3, #7
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	4313      	orrs	r3, r2
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	71fb      	strb	r3, [r7, #7]
    set_led_state(state);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff fea3 	bl	8000208 <set_led_state>
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <main>:

int main(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	// Initializes clocks, I/O, timer, and LED state.
	// Registers a callback to rotate LEDs when button is pressed.
	// Main loop is idle — interrupts handle everything.
    enable_clocks();
 80004d0:	f7ff ff1e 	bl	8000310 <enable_clocks>
    initialise_leds();
 80004d4:	f7ff fe7e 	bl	80001d4 <initialise_leds>
    initialise_button();
 80004d8:	f7ff ffc6 	bl	8000468 <initialise_button>
    init_timer();
 80004dc:	f7ff ff58 	bl	8000390 <init_timer>

    // Initialize LED state to a known pattern
    set_led_state(0b00000001);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f7ff fe91 	bl	8000208 <set_led_state>

    // Set the button callback to chase LEDs
    set_button_callback(chase_led_callback);
 80004e6:	4803      	ldr	r0, [pc, #12]	@ (80004f4 <main+0x28>)
 80004e8:	f7ff ff92 	bl	8000410 <set_button_callback>
    enable_interrupt();
 80004ec:	f7ff ff26 	bl	800033c <enable_interrupt>

    while (1) {
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <main+0x24>
 80004f4:	08000499 	.word	0x08000499

080004f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f8:	480d      	ldr	r0, [pc, #52]	@ (8000530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000500:	480c      	ldr	r0, [pc, #48]	@ (8000534 <LoopForever+0x6>)
  ldr r1, =_edata
 8000502:	490d      	ldr	r1, [pc, #52]	@ (8000538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000504:	4a0d      	ldr	r2, [pc, #52]	@ (800053c <LoopForever+0xe>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000518:	4c0a      	ldr	r4, [pc, #40]	@ (8000544 <LoopForever+0x16>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000526:	f000 f811 	bl	800054c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052a:	f7ff ffcf 	bl	80004cc <main>

0800052e <LoopForever>:

LoopForever:
  b LoopForever
 800052e:	e7fe      	b.n	800052e <LoopForever>
  ldr   r0, =_estack
 8000530:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800053c:	080005b4 	.word	0x080005b4
  ldr r2, =_sbss
 8000540:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000544:	20000024 	.word	0x20000024

08000548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <ADC1_2_IRQHandler>
	...

0800054c <__libc_init_array>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	4d0d      	ldr	r5, [pc, #52]	@ (8000584 <__libc_init_array+0x38>)
 8000550:	4c0d      	ldr	r4, [pc, #52]	@ (8000588 <__libc_init_array+0x3c>)
 8000552:	1b64      	subs	r4, r4, r5
 8000554:	10a4      	asrs	r4, r4, #2
 8000556:	2600      	movs	r6, #0
 8000558:	42a6      	cmp	r6, r4
 800055a:	d109      	bne.n	8000570 <__libc_init_array+0x24>
 800055c:	4d0b      	ldr	r5, [pc, #44]	@ (800058c <__libc_init_array+0x40>)
 800055e:	4c0c      	ldr	r4, [pc, #48]	@ (8000590 <__libc_init_array+0x44>)
 8000560:	f000 f818 	bl	8000594 <_init>
 8000564:	1b64      	subs	r4, r4, r5
 8000566:	10a4      	asrs	r4, r4, #2
 8000568:	2600      	movs	r6, #0
 800056a:	42a6      	cmp	r6, r4
 800056c:	d105      	bne.n	800057a <__libc_init_array+0x2e>
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f855 3b04 	ldr.w	r3, [r5], #4
 8000574:	4798      	blx	r3
 8000576:	3601      	adds	r6, #1
 8000578:	e7ee      	b.n	8000558 <__libc_init_array+0xc>
 800057a:	f855 3b04 	ldr.w	r3, [r5], #4
 800057e:	4798      	blx	r3
 8000580:	3601      	adds	r6, #1
 8000582:	e7f2      	b.n	800056a <__libc_init_array+0x1e>
 8000584:	080005ac 	.word	0x080005ac
 8000588:	080005ac 	.word	0x080005ac
 800058c:	080005ac 	.word	0x080005ac
 8000590:	080005b0 	.word	0x080005b0

08000594 <_init>:
 8000594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000596:	bf00      	nop
 8000598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059a:	bc08      	pop	{r3}
 800059c:	469e      	mov	lr, r3
 800059e:	4770      	bx	lr

080005a0 <_fini>:
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a2:	bf00      	nop
 80005a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a6:	bc08      	pop	{r3}
 80005a8:	469e      	mov	lr, r3
 80005aa:	4770      	bx	lr
