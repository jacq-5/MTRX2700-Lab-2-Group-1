
excersise_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000480  08000480  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000480  08000480  00002028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000480  08000480  00002028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000480  08000480  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000480  08000480  00001480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000484  08000484  00001484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08000488  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002028  2**0
                  CONTENTS
 10 .bss          0000001c  20000028  20000028  00002028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00002028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000070d  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002d9  00000000  00000000  00002765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00002a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005e  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015a16  00000000  00000000  00002b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c8f  00000000  00000000  00018544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075f8d  00000000  00000000  000191d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008f160  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000158  00000000  00000000  0008f1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0008f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000468 	.word	0x08000468

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	08000468 	.word	0x08000468

080001d4 <finished_transmission>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void finished_transmission(uint32_t bytes_sent) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	// This function will be called after a transmission is complete

	volatile uint32_t test = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
	// make a very simple delay
	for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
 80001e0:	2300      	movs	r3, #0
 80001e2:	60bb      	str	r3, [r7, #8]
 80001e4:	e002      	b.n	80001ec <finished_transmission+0x18>
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	3301      	adds	r3, #1
 80001ea:	60bb      	str	r3, [r7, #8]
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4a05      	ldr	r2, [pc, #20]	@ (8000204 <finished_transmission+0x30>)
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d9f8      	bls.n	80001e6 <finished_transmission+0x12>
		// waste time !
	}
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	0008fffe 	.word	0x0008fffe

08000208 <main>:


int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b09a      	sub	sp, #104	@ 0x68
 800020c:	af00      	add	r7, sp, #0
	//uint8_t *string_to_send = "This is a string !\r\n";
	//uint8_t *send = "sending!!! \r\n";
	uint8_t buffer[100];

	void (*completion_function)(uint32_t) = &finished_transmission;
 800020e:	4b08      	ldr	r3, [pc, #32]	@ (8000230 <main+0x28>)
 8000210:	667b      	str	r3, [r7, #100]	@ 0x64

	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
 8000212:	4a07      	ldr	r2, [pc, #28]	@ (8000230 <main+0x28>)
 8000214:	4907      	ldr	r1, [pc, #28]	@ (8000234 <main+0x2c>)
 8000216:	2004      	movs	r0, #4
 8000218:	f000 f80e 	bl	8000238 <SerialInitialise>

	//transmit string
	//SerialOutputString(send, &USART1_PORT);

	//receive string
	SerialInputString(buffer, &USART1_PORT);
 800021c:	463b      	mov	r3, r7
 800021e:	4905      	ldr	r1, [pc, #20]	@ (8000234 <main+0x2c>)
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f8ad 	bl	8000380 <SerialInputString>
 8000226:	2300      	movs	r3, #0

}
 8000228:	4618      	mov	r0, r3
 800022a:	3768      	adds	r7, #104	@ 0x68
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	080001d5 	.word	0x080001d5
 8000234:	20000000 	.word	0x20000000

08000238 <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000238:	b480      	push	{r7}
 800023a:	b087      	sub	sp, #28
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800024a:	4b39      	ldr	r3, [pc, #228]	@ (8000330 <SerialInitialise+0xf8>)
 800024c:	69db      	ldr	r3, [r3, #28]
 800024e:	4a38      	ldr	r2, [pc, #224]	@ (8000330 <SerialInitialise+0xf8>)
 8000250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000254:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000256:	4b36      	ldr	r3, [pc, #216]	@ (8000330 <SerialInitialise+0xf8>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a35      	ldr	r2, [pc, #212]	@ (8000330 <SerialInitialise+0xf8>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	691a      	ldr	r2, [r3, #16]
 8000266:	4b32      	ldr	r3, [pc, #200]	@ (8000330 <SerialInitialise+0xf8>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4931      	ldr	r1, [pc, #196]	@ (8000330 <SerialInitialise+0xf8>)
 800026c:	4313      	orrs	r3, r2
 800026e:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	68ba      	ldr	r2, [r7, #8]
 8000276:	6952      	ldr	r2, [r2, #20]
 8000278:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	6992      	ldr	r2, [r2, #24]
 8000282:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	69d9      	ldr	r1, [r3, #28]
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	6a1a      	ldr	r2, [r3, #32]
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	430a      	orrs	r2, r1
 8000294:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	6a19      	ldr	r1, [r3, #32]
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	430a      	orrs	r2, r1
 80002a6:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	68da      	ldr	r2, [r3, #12]
 80002ac:	4b20      	ldr	r3, [pc, #128]	@ (8000330 <SerialInitialise+0xf8>)
 80002ae:	69db      	ldr	r3, [r3, #28]
 80002b0:	491f      	ldr	r1, [pc, #124]	@ (8000330 <SerialInitialise+0xf8>)
 80002b2:	4313      	orrs	r3, r2
 80002b4:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000330 <SerialInitialise+0xf8>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	491c      	ldr	r1, [pc, #112]	@ (8000330 <SerialInitialise+0xf8>)
 80002c0:	4313      	orrs	r3, r2
 80002c2:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	330c      	adds	r3, #12
 80002ca:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b04      	cmp	r3, #4
 80002d0:	d820      	bhi.n	8000314 <SerialInitialise+0xdc>
 80002d2:	a201      	add	r2, pc, #4	@ (adr r2, 80002d8 <SerialInitialise+0xa0>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	080002ed 	.word	0x080002ed
 80002dc:	080002f5 	.word	0x080002f5
 80002e0:	080002fd 	.word	0x080002fd
 80002e4:	08000305 	.word	0x08000305
 80002e8:	0800030d 	.word	0x0800030d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	2246      	movs	r2, #70	@ 0x46
 80002f0:	801a      	strh	r2, [r3, #0]
		break;
 80002f2:	e00f      	b.n	8000314 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	2246      	movs	r2, #70	@ 0x46
 80002f8:	801a      	strh	r2, [r3, #0]
		break;
 80002fa:	e00b      	b.n	8000314 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	2246      	movs	r2, #70	@ 0x46
 8000300:	801a      	strh	r2, [r3, #0]
		break;
 8000302:	e007      	b.n	8000314 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	2246      	movs	r2, #70	@ 0x46
 8000308:	801a      	strh	r2, [r3, #0]
		break;
 800030a:	e003      	b.n	8000314 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	2246      	movs	r2, #70	@ 0x46
 8000310:	801a      	strh	r2, [r3, #0]
		break;
 8000312:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f042 020d 	orr.w	r2, r2, #13
 8000322:	601a      	str	r2, [r3, #0]
}
 8000324:	bf00      	nop
 8000326:	371c      	adds	r7, #28
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40021000 	.word	0x40021000

08000334 <SerialInputChar>:
	}

	serial_port->UART->TDR = data;
}

void SerialInputChar(uint8_t *data, SerialPort *serial_port) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]

	serial_port->UART->ICR |= USART_ICR_FECF | USART_ICR_ORECF;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	6a1a      	ldr	r2, [r3, #32]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f042 020a 	orr.w	r2, r2, #10
 800034c:	621a      	str	r2, [r3, #32]
	//uint8_t test = serial_port->UART->ISR & USART_ISR_RXNE;
	serial_port->UART->ICR |= (USART_ICR_ORECF | USART_ICR_FECF);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	6a1a      	ldr	r2, [r3, #32]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f042 020a 	orr.w	r2, r2, #10
 800035c:	621a      	str	r2, [r3, #32]
    //while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0) {
    //}
    //test = serial_port->UART->ISR & USART_ISR_RXNE;
    // Read received character
    *data = (uint8_t)(serial_port->UART->RDR); // Reading RDR clears RXNE
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000364:	b29b      	uxth	r3, r3
 8000366:	b2da      	uxtb	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	701a      	strb	r2, [r3, #0]

    serial_port->UART->RQR = USART_RQR_RXFRQ;
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2208      	movs	r2, #8
 8000372:	619a      	str	r2, [r3, #24]

}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <SerialInputString>:
	}

	serial_port->completion_function(counter);
}

void SerialInputString(uint8_t *pt, SerialPort *serial_port) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
	uint32_t counter = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
		}

		serial_port->completion_function(counter);*/

	    // Read first character
	    SerialInputChar(pt, serial_port);
 800038e:	6839      	ldr	r1, [r7, #0]
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff ffcf 	bl	8000334 <SerialInputChar>
	    counter++;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	3301      	adds	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]

	    // Keep reading until '#' is received
	    while (*pt != '#') {
 800039c:	e009      	b.n	80003b2 <SerialInputString+0x32>
	        pt++;  // Move pointer
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
	        SerialInputChar(pt, serial_port);
 80003a4:	6839      	ldr	r1, [r7, #0]
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f7ff ffc4 	bl	8000334 <SerialInputChar>
	        counter++;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3301      	adds	r3, #1
 80003b0:	60fb      	str	r3, [r7, #12]
	    while (*pt != '#') {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b23      	cmp	r3, #35	@ 0x23
 80003b8:	d1f1      	bne.n	800039e <SerialInputString+0x1e>
	    }

	    serial_port->completion_function(counter);
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003be:	68f8      	ldr	r0, [r7, #12]
 80003c0:	4798      	blx	r3
}
 80003c2:	bf00      	nop
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003cc:	480d      	ldr	r0, [pc, #52]	@ (8000404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d4:	480c      	ldr	r0, [pc, #48]	@ (8000408 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d6:	490d      	ldr	r1, [pc, #52]	@ (800040c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000410 <LoopForever+0xe>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000418 <LoopForever+0x16>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fa:	f000 f811 	bl	8000420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fe:	f7ff ff03 	bl	8000208 <main>

08000402 <LoopForever>:

LoopForever:
  b LoopForever
 8000402:	e7fe      	b.n	8000402 <LoopForever>
  ldr   r0, =_estack
 8000404:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800040c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000410:	08000488 	.word	0x08000488
  ldr r2, =_sbss
 8000414:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000418:	20000044 	.word	0x20000044

0800041c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC1_2_IRQHandler>
	...

08000420 <__libc_init_array>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	4d0d      	ldr	r5, [pc, #52]	@ (8000458 <__libc_init_array+0x38>)
 8000424:	4c0d      	ldr	r4, [pc, #52]	@ (800045c <__libc_init_array+0x3c>)
 8000426:	1b64      	subs	r4, r4, r5
 8000428:	10a4      	asrs	r4, r4, #2
 800042a:	2600      	movs	r6, #0
 800042c:	42a6      	cmp	r6, r4
 800042e:	d109      	bne.n	8000444 <__libc_init_array+0x24>
 8000430:	4d0b      	ldr	r5, [pc, #44]	@ (8000460 <__libc_init_array+0x40>)
 8000432:	4c0c      	ldr	r4, [pc, #48]	@ (8000464 <__libc_init_array+0x44>)
 8000434:	f000 f818 	bl	8000468 <_init>
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	10a4      	asrs	r4, r4, #2
 800043c:	2600      	movs	r6, #0
 800043e:	42a6      	cmp	r6, r4
 8000440:	d105      	bne.n	800044e <__libc_init_array+0x2e>
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f855 3b04 	ldr.w	r3, [r5], #4
 8000448:	4798      	blx	r3
 800044a:	3601      	adds	r6, #1
 800044c:	e7ee      	b.n	800042c <__libc_init_array+0xc>
 800044e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000452:	4798      	blx	r3
 8000454:	3601      	adds	r6, #1
 8000456:	e7f2      	b.n	800043e <__libc_init_array+0x1e>
 8000458:	08000480 	.word	0x08000480
 800045c:	08000480 	.word	0x08000480
 8000460:	08000480 	.word	0x08000480
 8000464:	08000484 	.word	0x08000484

08000468 <_init>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr

08000474 <_fini>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr
