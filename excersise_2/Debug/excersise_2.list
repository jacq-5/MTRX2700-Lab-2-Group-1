
excersise_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000360  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f4  080004f4  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f4  080004f4  00002028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004f4  080004f4  00002028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004f4  080004f4  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f4  080004f4  000014f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004f8  080004f8  000014f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080004fc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002028  2**0
                  CONTENTS
 10 .bss          00000084  20000028  20000028  00002028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00002028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000111d  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004d3  00000000  00000000  00003175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00003648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a2  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015cef  00000000  00000000  000037d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000010b4  00000000  00000000  000194c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000765ce  00000000  00000000  0001a575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00090b43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002cc  00000000  00000000  00090b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00090e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004dc 	.word	0x080004dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	080004dc 	.word	0x080004dc

080001d4 <finished_transmission>:
uint8_t term_check = 0;



// This function will be called after a transmission is complete [callback function]
void finished_transmission(uint8_t *rx_string, uint32_t bytes_sent) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	rx_string[bytes_sent] = '\0'; 		//end of string becomes terminating character so it transmits correctly
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	4413      	add	r3, r2
 80001e4:	2200      	movs	r2, #0
 80001e6:	701a      	strb	r2, [r3, #0]
	SerialOutputString(rx_string, &USART1_PORT);
 80001e8:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <finished_transmission+0x24>)
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f000 f8e5 	bl	80003ba <SerialOutputString>
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000000 	.word	0x20000000

080001fc <USART1_EXTI25_IRQHandler>:
void (*when_receiving_data)(uint8_t [][32], SerialPort *) = 0x00;
//void (*when_receiving_data)(uint8_t *, SerialPort *) = 0x00;
void (*when_sending_data)() = 0x00;

void USART1_EXTI25_IRQHandler(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
			uint8_t discard = when_receiving_data(excess_buffer, &USART1_PORT);
		}
		 */

	// run the USART transmit handler (make sure it is not null first !)
	if (when_sending_data != 0x00) {
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <USART1_EXTI25_IRQHandler+0x20>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d006      	beq.n	8000216 <USART1_EXTI25_IRQHandler+0x1a>
		when_sending_data(buffer[0], &USART1_PORT); //try getting rid of these arguments, don't need them
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <USART1_EXTI25_IRQHandler+0x20>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a04      	ldr	r2, [pc, #16]	@ (8000220 <USART1_EXTI25_IRQHandler+0x24>)
 800020e:	7812      	ldrb	r2, [r2, #0]
 8000210:	4904      	ldr	r1, [pc, #16]	@ (8000224 <USART1_EXTI25_IRQHandler+0x28>)
 8000212:	4610      	mov	r0, r2
 8000214:	4798      	blx	r3
	}
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	200000a8 	.word	0x200000a8
 8000220:	20000044 	.word	0x20000044
 8000224:	20000000 	.word	0x20000000

08000228 <main>:
}



int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission); //set callback function
 800022e:	4a07      	ldr	r2, [pc, #28]	@ (800024c <main+0x24>)
 8000230:	4907      	ldr	r1, [pc, #28]	@ (8000250 <main+0x28>)
 8000232:	2004      	movs	r0, #4
 8000234:	f000 f810 	bl	8000258 <SerialInitialise>

	//part (b)
	//void (*completion_function)(uint8_t *, uint32_t) = &finished_transmission; //test if i need this line

	//part (a) and (b)
	uint8_t terminating = '#';
 8000238:	2323      	movs	r3, #35	@ 0x23
 800023a:	71fb      	strb	r3, [r7, #7]
	//SerialOutputString(send, &USART1_PORT);					//transmit string
	SerialInputString(buffer, &USART1_PORT, terminating);		//receive string
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	461a      	mov	r2, r3
 8000240:	4903      	ldr	r1, [pc, #12]	@ (8000250 <main+0x28>)
 8000242:	4804      	ldr	r0, [pc, #16]	@ (8000254 <main+0x2c>)
 8000244:	f000 f8d1 	bl	80003ea <SerialInputString>
	/*enable_clocks();
	initialise_leds();
	set_led_state(led_value);*/

	/* Loop forever */
		for(;;) {}
 8000248:	bf00      	nop
 800024a:	e7fd      	b.n	8000248 <main+0x20>
 800024c:	080001d5 	.word	0x080001d5
 8000250:	20000000 	.word	0x20000000
 8000254:	20000044 	.word	0x20000044

08000258 <SerialInitialise>:
//uint8_t userBufferReady = 0;
uint8_t still_reading = 0;

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint8_t *, uint32_t)) {
 8000258:	b480      	push	{r7}
 800025a:	b087      	sub	sp, #28
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;		//set callback function
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800026a:	4b39      	ldr	r3, [pc, #228]	@ (8000350 <SerialInitialise+0xf8>)
 800026c:	69db      	ldr	r3, [r3, #28]
 800026e:	4a38      	ldr	r2, [pc, #224]	@ (8000350 <SerialInitialise+0xf8>)
 8000270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000274:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000276:	4b36      	ldr	r3, [pc, #216]	@ (8000350 <SerialInitialise+0xf8>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a35      	ldr	r2, [pc, #212]	@ (8000350 <SerialInitialise+0xf8>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	691a      	ldr	r2, [r3, #16]
 8000286:	4b32      	ldr	r3, [pc, #200]	@ (8000350 <SerialInitialise+0xf8>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4931      	ldr	r1, [pc, #196]	@ (8000350 <SerialInitialise+0xf8>)
 800028c:	4313      	orrs	r3, r2
 800028e:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	68ba      	ldr	r2, [r7, #8]
 8000296:	6952      	ldr	r2, [r2, #20]
 8000298:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	6992      	ldr	r2, [r2, #24]
 80002a2:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	69d9      	ldr	r1, [r3, #28]
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	6a1a      	ldr	r2, [r3, #32]
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	685b      	ldr	r3, [r3, #4]
 80002b2:	430a      	orrs	r2, r1
 80002b4:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	6a19      	ldr	r1, [r3, #32]
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	430a      	orrs	r2, r1
 80002c6:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	4b20      	ldr	r3, [pc, #128]	@ (8000350 <SerialInitialise+0xf8>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	491f      	ldr	r1, [pc, #124]	@ (8000350 <SerialInitialise+0xf8>)
 80002d2:	4313      	orrs	r3, r2
 80002d4:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	689a      	ldr	r2, [r3, #8]
 80002da:	4b1d      	ldr	r3, [pc, #116]	@ (8000350 <SerialInitialise+0xf8>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	491c      	ldr	r1, [pc, #112]	@ (8000350 <SerialInitialise+0xf8>)
 80002e0:	4313      	orrs	r3, r2
 80002e2:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	330c      	adds	r3, #12
 80002ea:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	2b04      	cmp	r3, #4
 80002f0:	d820      	bhi.n	8000334 <SerialInitialise+0xdc>
 80002f2:	a201      	add	r2, pc, #4	@ (adr r2, 80002f8 <SerialInitialise+0xa0>)
 80002f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f8:	0800030d 	.word	0x0800030d
 80002fc:	08000315 	.word	0x08000315
 8000300:	0800031d 	.word	0x0800031d
 8000304:	08000325 	.word	0x08000325
 8000308:	0800032d 	.word	0x0800032d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	2246      	movs	r2, #70	@ 0x46
 8000310:	801a      	strh	r2, [r3, #0]
		break;
 8000312:	e00f      	b.n	8000334 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	2246      	movs	r2, #70	@ 0x46
 8000318:	801a      	strh	r2, [r3, #0]
		break;
 800031a:	e00b      	b.n	8000334 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	2246      	movs	r2, #70	@ 0x46
 8000320:	801a      	strh	r2, [r3, #0]
		break;
 8000322:	e007      	b.n	8000334 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	2246      	movs	r2, #70	@ 0x46
 8000328:	801a      	strh	r2, [r3, #0]
		break;
 800032a:	e003      	b.n	8000334 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	2246      	movs	r2, #70	@ 0x46
 8000330:	801a      	strh	r2, [r3, #0]
		break;
 8000332:	bf00      	nop
	}

	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f042 020d 	orr.w	r2, r2, #13
 8000342:	601a      	str	r2, [r3, #0]
}
 8000344:	bf00      	nop
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	6039      	str	r1, [r7, #0]
 800035e:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){		//check ready to transmit flag
 8000360:	bf00      	nop
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	69db      	ldr	r3, [r3, #28]
 8000368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0f8      	beq.n	8000362 <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;								//load data into transmit data register
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	79fa      	ldrb	r2, [r7, #7]
 8000376:	b292      	uxth	r2, r2
 8000378:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <SerialInputChar>:

void SerialInputChar(uint8_t *data, SerialPort *serial_port) {
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
 800038e:	6039      	str	r1, [r7, #0]

	// check ready to receive flag
    while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0) {
 8000390:	bf00      	nop
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0f8      	beq.n	8000392 <SerialInputChar+0xc>
    }

    // Read received character
    *data = (uint8_t)(serial_port->UART->RDR); 					// Reading RDR clears RXNE
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	701a      	strb	r2, [r3, #0]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <SerialOutputString>:
	serial_port->UART->ICR |= USART_ICR_FECF | USART_ICR_ORECF;
}
*/


void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	6039      	str	r1, [r7, #0]

	//continues to transmit while there are still characters to send
	while(*pt) {
 80003c4:	e008      	b.n	80003d8 <SerialOutputString+0x1e>
		SerialOutputChar(*pt, serial_port);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	6839      	ldr	r1, [r7, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ffc1 	bl	8000354 <SerialOutputChar>
		pt++;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3301      	adds	r3, #1
 80003d6:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d1f2      	bne.n	80003c6 <SerialOutputString+0xc>
	}

}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <SerialInputString>:

void SerialInputString(uint8_t *pt, SerialPort *serial_port, uint8_t terminating) {
 80003ea:	b580      	push	{r7, lr}
 80003ec:	b086      	sub	sp, #24
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	60f8      	str	r0, [r7, #12]
 80003f2:	60b9      	str	r1, [r7, #8]
 80003f4:	4613      	mov	r3, r2
 80003f6:	71fb      	strb	r3, [r7, #7]
	uint32_t counter = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
	uint8_t *start_of_string = pt;								/*initialise pointer to start of string
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	613b      	str	r3, [r7, #16]
																to pass to callback function*/
	//uint8_t buffer_size = sizeof(pt) / sizeof(pt[0]); //this may not work because of pointer

	// Read first character
	SerialInputChar(pt, serial_port);
 8000400:	68b9      	ldr	r1, [r7, #8]
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ffbf 	bl	8000386 <SerialInputChar>
	counter++;
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	3301      	adds	r3, #1
 800040c:	617b      	str	r3, [r7, #20]

	// Keep reading until terminating character is received
	while (*pt != terminating) {
 800040e:	e009      	b.n	8000424 <SerialInputString+0x3a>
		pt++;  													// Move pointer
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3301      	adds	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
		SerialInputChar(pt, serial_port);
 8000416:	68b9      	ldr	r1, [r7, #8]
 8000418:	68f8      	ldr	r0, [r7, #12]
 800041a:	f7ff ffb4 	bl	8000386 <SerialInputChar>
		counter++;
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	3301      	adds	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
	while (*pt != terminating) {
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	79fa      	ldrb	r2, [r7, #7]
 800042a:	429a      	cmp	r2, r3
 800042c:	d1f0      	bne.n	8000410 <SerialInputString+0x26>
		   break;
		 }
		 */
	}

	serial_port->completion_function(start_of_string, counter); //callback function
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000432:	6979      	ldr	r1, [r7, #20]
 8000434:	6938      	ldr	r0, [r7, #16]
 8000436:	4798      	blx	r3

}
 8000438:	bf00      	nop
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000440:	480d      	ldr	r0, [pc, #52]	@ (8000478 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000442:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000444:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000448:	480c      	ldr	r0, [pc, #48]	@ (800047c <LoopForever+0x6>)
  ldr r1, =_edata
 800044a:	490d      	ldr	r1, [pc, #52]	@ (8000480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800044c:	4a0d      	ldr	r2, [pc, #52]	@ (8000484 <LoopForever+0xe>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000450:	e002      	b.n	8000458 <LoopCopyDataInit>

08000452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000456:	3304      	adds	r3, #4

08000458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800045c:	d3f9      	bcc.n	8000452 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045e:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000460:	4c0a      	ldr	r4, [pc, #40]	@ (800048c <LoopForever+0x16>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000464:	e001      	b.n	800046a <LoopFillZerobss>

08000466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000468:	3204      	adds	r2, #4

0800046a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800046c:	d3fb      	bcc.n	8000466 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800046e:	f000 f811 	bl	8000494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000472:	f7ff fed9 	bl	8000228 <main>

08000476 <LoopForever>:

LoopForever:
  b LoopForever
 8000476:	e7fe      	b.n	8000476 <LoopForever>
  ldr   r0, =_estack
 8000478:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800047c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000480:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000484:	080004fc 	.word	0x080004fc
  ldr r2, =_sbss
 8000488:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800048c:	200000ac 	.word	0x200000ac

08000490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000490:	e7fe      	b.n	8000490 <ADC1_2_IRQHandler>
	...

08000494 <__libc_init_array>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	4d0d      	ldr	r5, [pc, #52]	@ (80004cc <__libc_init_array+0x38>)
 8000498:	4c0d      	ldr	r4, [pc, #52]	@ (80004d0 <__libc_init_array+0x3c>)
 800049a:	1b64      	subs	r4, r4, r5
 800049c:	10a4      	asrs	r4, r4, #2
 800049e:	2600      	movs	r6, #0
 80004a0:	42a6      	cmp	r6, r4
 80004a2:	d109      	bne.n	80004b8 <__libc_init_array+0x24>
 80004a4:	4d0b      	ldr	r5, [pc, #44]	@ (80004d4 <__libc_init_array+0x40>)
 80004a6:	4c0c      	ldr	r4, [pc, #48]	@ (80004d8 <__libc_init_array+0x44>)
 80004a8:	f000 f818 	bl	80004dc <_init>
 80004ac:	1b64      	subs	r4, r4, r5
 80004ae:	10a4      	asrs	r4, r4, #2
 80004b0:	2600      	movs	r6, #0
 80004b2:	42a6      	cmp	r6, r4
 80004b4:	d105      	bne.n	80004c2 <__libc_init_array+0x2e>
 80004b6:	bd70      	pop	{r4, r5, r6, pc}
 80004b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004bc:	4798      	blx	r3
 80004be:	3601      	adds	r6, #1
 80004c0:	e7ee      	b.n	80004a0 <__libc_init_array+0xc>
 80004c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c6:	4798      	blx	r3
 80004c8:	3601      	adds	r6, #1
 80004ca:	e7f2      	b.n	80004b2 <__libc_init_array+0x1e>
 80004cc:	080004f4 	.word	0x080004f4
 80004d0:	080004f4 	.word	0x080004f4
 80004d4:	080004f4 	.word	0x080004f4
 80004d8:	080004f8 	.word	0x080004f8

080004dc <_init>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr

080004e8 <_fini>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr
